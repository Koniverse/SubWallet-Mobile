export const vi = {
  common: {
    welcomeBack: 'Welcome back!',
    enterPinToUnlock: 'Enter PIN to unlock',
    addOrConnectAccount: 'Add / Connect account',
    createNewWalletAccount: 'Create a new account',
    importExistingWallet: 'Import an existing account',
    firstScreenNotification: 'By continuing, you agree to our Terms and Privacy Policy',
    createWalletName: 'Create a new account',
    createWalletNotification: 'Your wallet name will only be used locally in this application. You can edit it later.',
    importPrivateKey: 'Import private key',
    selectSendingMethod: 'Select send method',
    connectYourAccount: 'Connect your account',
    secretPhrase: 'Secret phrase',
    privateKey: 'Private key',
    jsonFile: 'JSON file',
    singleChain: 'Single chain',
    crossChain: 'Cross chain (XCM)',
    charityDonate: 'Charity donation',
    selectYourImport: 'Select import method',
    autoLock: 'Auto-Lock',
    transferSuccessMessage: 'Your request has been confirmed. You can track its progress on the History page.',
    transferFailMessage1: 'There was a problem with your request. You can track its progress on the History page.',
    transferFailMessage2: 'There was a problem with your request.',
    selectQrCodeFromGallery: 'Select Qr Code from Gallery',
    notify: 'Notification!',
    cannotScanQRCodeWithoutPermission: 'Please grant Camera access to scan QR code',
    goToSetting: 'Go to setting',
    scan: 'Scan',
    toSendFund: 'to send fund',
    toSendAsset: 'to send asset',
    emptyTransactionListMessage: 'Your transactions will appear here',
    emptyCrowdloanListMessage: 'Your crowdloan projects will appear here',
    emptyBrowserMessage: 'Type a URL or search the web',
    emptyBrowserTabsMessage: 'Your browsing tabs will appear here',
    copyToClipboard: 'Copy to clipboard',
    copiedToClipboard: 'Copied to clipboard',
    continue: 'Continue',
    verifySecretPhraseMessage:
      'Fill in the words in the correct order to prove that you have saved your secret phrase.',
    firstScreenMessagePart1: 'By continuing, you agree to',
    firstScreenMessagePart2: 'our Terms & Conditions and Privacy Policy',
    network: 'Network',
    account: 'Account',
    sendFromAddress: 'Send from address',
    sendToAddress: 'Send to address',
    networkFee: 'Network fee',
    password: 'Password',
    backToHome: 'Back to home',
    resend: 'Resend',
    cancel: 'Cancel',
    pinCode: 'PIN code',
    newPinCode: 'New PIN code',
    repeatPinCode: 'Repeat PIN code',
    done: 'Done',
    accountName: 'Account name',
    accountAddress: 'Account address',
    passwordForThisAccount: 'Password for this account',
    importAccount: 'Import account',
    remove: 'Remove',
    walletPassword: 'Wallet password',
    repeatWalletPassword: 'Repeat wallet password',
    tapToRevealPrivateKey: 'Tap to reveal your private key',
    viewPrivateKeyTitle: 'Make sure no one is watching your screen',
    walletName: 'Wallet name',
    explorer: 'Explorer',
    share: 'Share',
    faceId: 'Face ID / Touch ID',
    changeYourPinCode: 'Change your PIN code',
    manageDAppAccess: 'Manage dApp access',
    appLock: 'App lock',
    viewInExplorer: 'View in explorer',
    viewHistory: 'View history',
    finish: 'Finish',
    send: 'Send',
    ok: 'OK',
    reloadBackground: 'Reload background',
    status: 'Status: ',
    url: 'URL: ',
    version: 'Version: ',
    subscribing: '................... Subscribing .................',
    sendMessage: 'Send message',
    allAccounts: 'All accounts',
    inputFileLabel: 'Paste your JSON file',
    message: 'Message',
    input: 'Input',
    max: 'Max',
    fee: 'Fee:',
    transferable: 'Transferable: ',
    receiveModalText: 'Scan address to receive payment',
    importSecretPhraseTitle: 'Restore an existing wallet account with your 12 or 24-word secret recovery phrase',
    comingSoon: 'Coming soon',
    win: 'Win',
    fail: 'Fail',
    active: 'Active',
    search: 'Search',
    searchPlaceholder: 'Search or enter website',
    apply: 'Apply',
    anErrorHasOccurred: 'An error has occurred.',
    chooseAccount: 'Choose the account(s) youâ€™d like to connect',
    connect: 'Connect',
    favorites: 'Favorites',
    history: 'History',
    openInBrowser: 'Open in browser',
    removeFromFavourites: 'Remove from favourites',
    addToFavourites: 'Add to favourites',
    searchAtDuckDuckGo: 'Search at DuckDuckGo',
    searchResult: 'Search result',
    seeAll: 'See all',
    historyEmptyListPlaceholder: 'Your history will appear here',
    favouritesEmptyListPlaceholder: 'Your favourites will appear here',
    approve: 'Approve',
    metadataIsOutOfDate: 'Your metadata is out of date',
    selectAll: 'Select all',
    symbol: 'Symbol',
    decimals: 'Decimals',
    defaultReceiveAccountName: 'Received account / Contract address',
    info: 'Info',
    hexData: 'Hex data',
    detail: 'Detail',
    data: 'Data',
    method: 'Method',
    arguments: 'Arguments',
    amount: 'Amount',
    estimateGas: 'Estimate gas',
    sign: 'Sign',
    rawData: 'Raw data',
    signMethod: 'Sign method',
    from: 'From',
    genesis: 'Genesis',
    versionLabel: 'Version',
    nonce: 'Nonce',
    tip: 'Tip',
    lifetime: 'Lifetime',
    bytes: 'Bytes',
    immortal: 'immortal',
    immortalValidFrom: 'mortal, valid from',
    to: 'to',
    close: 'Close',
    viewDetail: 'View Detail',
    on: 'on',
    approveRequestTitle: 'You are approving a request with account',
    block: 'Block',
    unblock: 'Unblock',
    forgetAll: 'Forget all',
    disconnectAll: 'Disconnect all',
    connectAll: 'Connect all',
    forgetSite: 'Forget site',
    noDAppAvailable: 'No dApp available',
    noAccountAvailableForThisDApp: 'No account available for this dApp',
    received: 'Received',
    confirm: 'Confirm',
    viewTransaction: 'View transaction',
    transferNFTSuccessfullyMessage:
      'Your transfer request has been confirmed. It might take a minute to see changes in your wallet.',
    transferNFTFailedMessage: 'There was a problem with your request. You can try again.',
    address: 'address',
    toImportNFT: 'to import NFT',
    toImportToken: 'to import token',
    toSendNFT: 'to send NFT',
    approveRequestMessage: 'Only approve this request if you trust the app',
    approveTransactionMessage: 'You are approving a request send transaction',
    reject: 'Reject',
    sortBy: 'Sort by',
    closeAll: 'Close all',
    enterYourPrivateKey: 'Enter your private key',
    tokenType: 'Token type',
    save: 'Save',
    addToken: 'Add token',
    edit: 'Edit',
    importTokenSuccessMessage: 'Your changes are saved successfully',
    deleteToken: 'Delete Token',
    importToken: 'Import Token',
    emptyChainListMessage: 'Your chain will appear here',
    emptyTokenListMessage: 'Your token will appear here',
    customNetwork: 'Custom Network',
    manageTokenList: 'Manage Token List',
    enterYourPassword: 'Enter your password',
    noChainAvailable: 'No chain available',
    addNftSuccess: 'Successfully added a NFT collection',
    activeStaking: 'Active Staking',
    total: 'Total',
    chooseAction: 'Choose Action',
    useDeviceHaveGooglePlayStore: 'Please use a device with Google Play Store installed to continue using this app.',
    pleaseUpdateAndroidSystemWebView: 'Please update Android System Webview to continue using this app.',
    validator: 'Validator',
    collator: 'Collator',
    dApp: 'dApp',
    cancelTask: 'Cancel task',
    type: ' type',
    importAlreadyAccount: 'Import an existing account',
    transferNotSupportedForNetwork: 'Transfer is not supported for this network.',
    attachAccount: 'Attach Account',
    autoConnectDAppAfterCreating: 'Auto connect dApps after creating',
    scanFromHardwareWallet: 'Scan your address from Hardware Wallet',
    scanFromWallet: 'Scan your address from wallet',
    scanAddress: 'Scan address',
    providerErrorMessagePart1: 'Your current providers for ',
    providerErrorMessagePart2: ' have been disconnected. Please change provider to continue',
    goToNetworkConfig: 'Go to network config',
    substrateAccount: 'Substrate account',
    evmAccount: 'EVM account',
    crowdloanStatus: 'Crowdloan status',
    parachain: 'Parachain',
    allParachains: 'All parachains',
    allProjects: 'All projects',
    polkadotParachain: 'Polkadot Parachain',
    kusamaParachain: 'Kusama Parachain',
    submitting: 'Submitting...',
    sending: 'Sending...',
    scanForApprove: "Use your device's camera to scan the QR code\ndisplayed on your hardware wallet",
    scanQr: 'Scan QR',
    back: 'Back',
    useHardWalletToScan: "Use your hardware wallet's camera\nto scan this QR code",
    useNormalWalletScan: 'Scan this QR code with your wallet',
    scanQrPayload: "Use this device's camera to scan the QR code\ndisplayed on the other wallet",
    startOver: 'Start Over',
    scanSignatureToSignTransaction: 'Scan this QR code with your other wallet\nto sign transaction',
    scanSignatureToSignMessage: 'Scan this QR code with your other wallet\nto sign message',
    viewDetails: 'View details',
    unsupportedToken: 'Unsupported token',
  },
  title: {
    yourSecretPhrase: 'Your secret phrase',
    verifySecretPhrase: 'Verify your secret phrase',
    nameYourWallet: 'Name your wallet',
    sendFund: 'Send fund',
    sendAsset: 'Send asset',
    security: 'Security',
    selectAccount: 'Select account',
    selectAccountType: 'Select account type',
    settings: 'Settings',
    language: 'Language',
    accounts: 'Accounts',
    editAccount: 'Edit account',
    exportAccount: 'Export account',
    exportJson: 'Export JSON',
    importEVMPrivateKey: 'Import EVM private key',
    importByPrivateKey: 'Import by private key',
    importSecretPhrase: 'Import secret phrase',
    importBySecretPhrase: 'Import by secret phrase',
    network: 'Network',
    networks: 'Networks',
    removeAccount: 'Remove account',
    importFromJson: 'Import by JSON file',
    selectToken: 'Select token',
    exportPrivateKey: 'Export private key',
    selectNetwork: 'Select network',
    chain: 'Chain',
    token: 'Token',
    history: 'History',
    qrScanner: 'QR scanner',
    selectUnit: 'Select unit',
    filters: 'Filters',
    importNft: 'Import NFT',
    nftCollections: 'Your collectibles',
    nftList: 'NFT list',
    nftDetail: 'NFT detail',
    transferNft: 'Transfer NFT',
    authorizeTransaction: 'Authorize transaction',
    metadataTitlePart1: 'Approving this update will sync your metadata for the',
    metadataTitlePart2: 'chain from',
    authorizeRequestTitle: 'Approve request',
    phishingDetected: 'Phishing detected',
    requestToSignMessage: 'Request to sign message',
    requestToSendPayload: 'Request to send payload',
    manageDAppAccess: 'Manage dApp access',
    moreOptions: 'More options',
    scanQrCode: 'Scan QR code',
    transferNFTSuccessfully: 'Transfer NFT successfully',
    transferNFTFailed: 'Transfer NFT failed',
    sendTransaction: 'Send transaction',
    staking: 'Staking',
    stakingDetail: 'Staking details',
    stakingNetwork: 'Select a network',
    validators: 'Select a validator',
    collators: 'Select a collator',
    dApps: 'Select a dApp',
    configureToken: 'Configure token',
    importToken: 'Import token',
    validatorDetail: 'Validator detail',
    stakeAction: 'Stake',
    unStakeAction: 'Unstake',
    withdrawStakeAction: 'Withdraw',
    claimStakeAction: 'Claim reward',
    compoundStakeAction: 'Compound',
    receiveAsset: 'Receive asset',
    chainSelect: 'Chain select',
    importByQrCode: 'Import by QR code',
    createCompoundTask: 'Create task',
    cancelCompoundTask: 'Cancel task',
    addProvider: 'Add provider',
    attachAccount: 'Attach account',
    attachReadonlyAccount: 'Attach read-only account',
    attachQRSignerAccount: 'Attach QR signer account',
    connectLedgerDevice: 'Connect ledger device',
    scanAddress: 'Scan address',
    qrSigner: 'Address QR signer',
    readonlyAccount: 'Address read-only account',
    addAccount: 'Add account',
    createNewAccount: 'Create new account',
    importAccount: 'Import account',
    scanApproveRequest: 'Scan Approve Request',
    approveRequest: 'Approve Request',
    signTransaction: 'Sign transaction',
    exportQrSigner: 'Export QR signer',
    scanPayload: 'Scan QR',
    signMessage: 'Sign Message',
    authorizeMessage: 'Authorize message',
    serviceSelect: 'Select service',
  },
  tabName: {
    crypto: 'Crypto',
    nft: 'NFT',
    crowdloans: 'Crowdloans',
    staking: 'Staking',
    browser: 'Browser',
  },
  cryptoScreen: {
    receive: 'Receive',
    send: 'Send',
    swap: 'Swap',
    buy: 'Buy',
  },
  nftScreen: {
    nftAppearHere: 'Your NFTs will appear here',
    dontSeeNft: "Don't see your NFTs?",
    importNft: 'Import NFTs',
    nftDetail: {
      description: 'Description',
      rarity: 'Rarity',
      properties: 'Properties',
      resourcesOrInventory: 'Resources or inventory',
      collectionName: 'Collection name',
      ownedBy: 'Owned by',
      createdBy: 'Created by',
    },
  },
  importEvmNft: {
    smartContract: 'NFT contract address',
    chain: 'Chain',
    nftCollectionName: 'NFT collection name',
    cancel: 'Cancel',
    importNft: 'Import NFT',
  },
  importToken: {
    contractAddress: 'Contract address',
    tokenName: 'Token name',
    chain: 'Chain',
  },
  sendAssetScreen: {
    originChain: 'Origin chain',
    destinationChain: 'Destination chain',
    fromAccount: 'From account',
    toAccount: 'To account',
    originChainFee: 'Origin chain fee',
    total: 'Total',
    amountGtAvailableBalanceMessage: 'The amount you want to transfer is greater than your available balance.',
    onChain: 'On-chain',
    crossChain: 'Cross-chain',
    transactionSuccessful: 'Transaction successful',
    transactionFail: 'Transaction fail',
    success: 'Success!',
    fail: 'Fail!',
  },
  transferNft: {
    send: 'Send',
    nft: 'NFT',
    chain: 'Chain',
    signAndSubmit: 'Sign and submit',
    success: {
      title: 'Transfer NFT successfully',
      subText: 'Your transfer request has been confirmed. It might take a minute to see changes in your wallet.',
    },
    fail: {
      title: 'Transfer NFT failed',
      subText: 'There was a problem with your request. You can try again.',
    },
  },
  stakingScreen: {
    startStaking: 'Start staking',
    balanceList: {
      stakingAppearHere: 'Your staking accounts will be appear here',
      nominatedBalance: 'Nominated balance',
      pooledBalance: 'Pooled balance',
    },
    stakingDetail: {
      activeStake: 'Active stake',
      unlockingStake: 'Unlocking stake',
      totalReward: 'Total reward',
      latestReward: 'Latest reward',
      totalSlash: 'Total slash',
      unStakeFunds: 'Unstake funds',
      stakingType: 'Staking type',
      unclaimedReward: 'Unclaimed Reward',
      actions: {
        stake: 'Stake more',
        unStake: 'Unstake funds',
        withdraw: 'Withdraw',
        claim: 'Claim rewards',
        compound: 'Compound stake',
        more: 'More',
      },
    },
    networkList: {
      validators: 'validators',
      searchNetwork: 'Search network...',
      chainAppearHere: 'Your chain will appear here',
      noChainAvailable: 'No network available',
    },
    validatorList: {
      searchValidator: 'Search validator...',
      searchCollator: 'Search collator...',
      searchDApp: 'Search dApp...',
      totalStake: 'Total stake',
      minStake: 'Min stake',
      lowestCommission: 'Lowest commission',
      highestReturn: 'Highest return',
      validatorAppearHere: 'Your validator will appear here',
      noValidatorAvailable: 'No validator available',
      collatorAppearHere: 'Your collator will appear here',
      noCollatorAvailable: 'No collator available',
      dAppAppearHere: 'Your dApp will appear here',
      noDAppAvailable: 'No dApp available',
    },
    validatorDetail: {
      totalStake: 'Total stake',
      expected: 'Expected',
      ownStake: 'Own stake',
      nominatorsCount: 'Nominators count',
      minimumStake: 'Minimum stake',
      commission: 'Commission',
    },
  },
  stakeAction: {
    stakingAmount: 'Staking amount',
    stakingFee: 'Staking fee',
    total: 'Total',
    success: {
      title: 'Staked successfully',
      subText: 'Your staking request has been confirmed. It might take a minute to see changes in your wallet.',
    },
    fail: {
      title: 'Staking failed',
      subText: 'There was a problem with your request. You can try again.',
    },
  },
  unStakeAction: {
    collator: 'Collator',
    unStakingAmount: 'Unstaking amount',
    unStakingFee: 'Unstaking fee',
    total: 'Total',
    success: {
      title: 'Unstake successfully',
      subText: 'Your unstaking request has been confirmed. It might take a minute to see changes in your wallet.',
    },
    fail: {
      title: 'Unstaking failed',
      subText: 'There was a problem with your request. You can try again.',
    },
  },
  withdrawStakeAction: {
    validator: 'Validator',
    withdrawAmount: 'Withdraw amount',
    withdrawFee: 'Withdraw fee',
    total: 'Total',
    success: {
      title: 'Withdraw successfully',
      subText: 'Your withdrawal request has been confirmed. It might take a minute to see changes in your wallet.',
    },
    fail: {
      title: 'Withdrawal failed',
      subText: 'There was a problem with your request. You can try again.',
    },
  },
  claimStakeAction: {
    claimFee: 'Claim fee',
    total: 'Total',
    success: {
      title: 'Claim reward successfully',
      subText: 'Your claiming request has been confirmed. It might take a minute to see changes in your wallet.',
    },
    fail: {
      title: 'Reward claiming failed',
      subText: 'There was a problem with your request. You can try again.',
    },
  },
  compoundStakeAction: {
    taskId: 'Task ID',
    compoundingThreshold: 'Compounding threshold',
    optimalCompoundingTime: 'Optimal compounding time',
    total: 'Total',
    transactionFee: 'Transaction fee',
    compoundingStartIn: 'Compounding starts in',
    compoundingFee: 'Compounding fee',
    compound: {
      success: {
        title: 'Request executed successfully',
        subText: 'Your compounding request has been confirmed. It might take a minute to see changes in your wallet.',
      },
      fail: {
        title: 'Compounding request failed',
        subText: 'There was a problem with your request. You can try again.',
      },
    },
    cancelCompound: {
      success: {
        title: 'Request executed successfully',
        subText: 'Your compounding request has been cancelled. It might take a minute to see changes in your wallet.',
      },
      fail: {
        title: 'Request cancellation failed',
        subText: 'There was a problem with your request. You can try again.',
      },
    },
  },
  signingAction: {
    basic: 'Basic',
    detail: 'Detail',
    signature: 'Signature',
    message: 'Message',
    to: 'To',
    data: 'Data',
    nonce: 'Nonce',
    value: 'Value',
    gas: 'Gas',
    gasPrice: 'Gas price',
    method: 'Method',
    phase: 'Phase',
    period: 'Period',
    tip: 'Tip',
    era: 'Era',
    approveRequestThisAcc: 'Approve request this account?',
  },
  settings: {
    notifications: 'Notifications',
    network: 'Network',
    manageTokens: 'Manage tokens',
    tokens: 'Tokens',
    telegram: 'Telegram',
    twitter: 'Twitter',
    discord: 'Discord',
    website: 'Website',
    documentation: 'Documentation',
    termOfService: 'Terms of service',
    privacyPolicy: 'Privacy policy',
    webViewDebugger: 'Web view debugger',
    lock: 'Lock',
    exportPrivateKey: 'Export private key',
    immediately: 'Immediately',
    ifLeftFor15Seconds: 'If left for 15 seconds',
    ifLeftFor30Seconds: 'If left for 30 seconds',
    ifLeftFor1Minute: 'If left for 1 minute',
    ifLeftFor5Minutes: 'If left for 5 minutes',
    ifLeftFor15Minutes: 'If left for 15 minutes',
    ifLeftFor30Minutes: 'If left for 30 minutes',
    ifLeftFor1Hour: 'If left for 1 hour',
    whenCloseApp: 'When close app',
    networkAndAssets: 'Network & assets',
    communityAndSupport: 'Community & support',
    about: 'About',
  },
  warningTitle: {
    doNotSharePrivateKey: 'Do not share your private key!',
    doNotShareSecretPhrase: 'Do not share your secret phrase!',
    doNotShareJsonFile: 'Do not share your JSON file!',
    warning: 'Warning',
    error: 'Error!',
    clearHistory: 'Clear history',
  },
  warningMessage: {
    passwordTooShort: 'Password is too short',
    noTokenAvailable: 'No token available',
    noNetworkAvailable: 'No network available',
    noServiceAvailable: 'No service available',
    noAccountText: "You currently don't have any accounts. Create your first account to get started.",
    privateKeyWarning: 'If someone has your private key they will have full control of your account',
    secretPhraseWarning: 'If someone gets access to your secret phrase they will have full control of your account',
    unableDecode: 'Unable to decode using the supplied passphrase',
    invalidJsonFile: 'Invalid Json file',
    noPasswordMessage: 'Please fill repeat password',
    doNotMatchPasswordWarning: 'Passwords do not match',
    isNotSameAddress: 'The recipient address is the same as the sender address.',
    recipientPhish: 'The recipient is associated with a known phishing site on',
    isNotSameAddressAndTokenType: 'Transfer is not supported for this type of account and token',
    recipientAddressMustBe: 'The recipient address must be ',
    originAccountMustBe: 'Origin account must be ',
    destinationAccountMustBe: 'Destination account must be ',
    invalidEVMPrivateKey: 'Invalid EVM private key',
    removeAccountWarning:
      'You are about to remove this account. This means that you will not able to access it via this application any more. If you wish to recover it, you will need to use the secret phrase.',
    initSecretPhrase: 'You will lose your assets if you lose your secret phrase.',
    exportAccountWarning: "You are exporting your account. Keep it safe and don't share it with anyone.",
    noAccountMessage: "There's no account at the moment",
    requireMessage: 'This field is required',
    notSupportTransferMessage: 'The transfer for the current token is not supported',
    noEvmAccountMessage: "You don't have any evm account. Please create, import or restore an account to continue",
    noSubstrateAccountMessage:
      "You don't have any substrate account. Please create, import or restore an account to continue",
    trustSiteMessage: 'Make sure you trust this site before connecting',
    ethSignWarningMessage:
      "Signing this message can be dangerous. This signature could potentially perform any operation on your account's behalf, including granting complete control of your account and all of its assets to the requesting site. Only sign this message if you know what you're doing or completely trust the requesting site.",
    clearHistoryWarningMessage: 'Make sure you want to clear all history',
    phishingMessage:
      'This site is blocked because the Subwallet app believes that this website could compromise the security of your accounts and your tokens.',
    notEnoughToStake: 'Your free balance is not enough to stake',
    stakeAtLeast: 'You must stake at least',
    balanceTooLow: 'Your balance is too low to cover fees',
    withdrawUnStakingFirst: 'Please withdraw the unstaking amount first',
    freeBalanceAtLeast: 'Your free balance needs to be at least',
    chooseNominating: 'Please choose among the nominating validators only',
    amountGtZero: 'Amount must be greater than 0',
    thresholdLagerThan: 'The threshold must be larger than',
    unStakeEverything: 'You can only unstake everything',
    unStakeEverythingOrMaxOf: 'You can unstake everything or a maximum of',
    unStakeMaxOf: 'You can unstake a maximum of',
    invalidPrefix: 'Invalid prefix received, expected',
    invalidQRCode: 'Invalid QR code',
    cannotExtractAddress: "Can't extract address from the QR code",
    enableAtLeast1Network: 'Please enable at least 1 network',
    readOnly: 'You are using read-only account',
    sendReadOnly: 'The account you are using is read-only, you cannot send assets with it.',
    validatorMaxLimit: 'The validator is not looking for more nominations',
    noInternetMessage: 'No Internet connection. Please try again later',
    webRunnerDeadMessage: "We've run into an issue. Please try again later or restart the application",
    unSupportSigning: 'This feature is not available for the chosen account',
    networkUnSupportQrSigner: 'This network does not support this feature with QR-signer account',
    featureIsNotAvailable: 'This feature is not available for the chosen account',
  },
  errorMessage: {
    wrongPassword: 'Wrong password',
    invalidMnemonicSeed: 'Invalid mnemonic seed',
    invalidAddress: 'Invalid address',
    scanAgain: "Sorry, we've run into a problem.\nPlease scan again",
    transferNFTBalanceError: 'Your balance is too low to cover fees',
    transferNFTTxError: 'Encountered an error, please try again.',
    transferNFTError: 'Some error occurred. Please try again later.',
    occurredError: 'An error has occurred. Please try again later',
    invalidEvmContractAddress: 'Invalid EVM contract address',
    tokenAlreadyAdded: 'This token has already been added',
    invalidContractForSelectedChain: 'Invalid contract for the selected chain',
    noTokenAvailable: 'No token available',
    unknownError: 'Encountered an error, please try again.',
    networkHasBeenAlreadyAdded: 'This network has already been added',
    providerHasExisted: 'This provider has existed',
    providerIsNotTheSameNetwork: 'This provider is not the same network',
    unableToConnectToTheProvider: 'Unable to connect to the provider',
    providerRequirePrefix: 'Provider URL requires http/https or wss prefix',
    successfullyAddANewCustomProvider: 'Successfully added a new custom provider',
    errorConfigureNetwork: 'Error trying to configure network',
    noProviderAvailable: 'No provider available',
    qrCodeNotSupport:
      'QR code not supported, please make sure you are scanning a transaction from a supported software.',
    noNetwork: 'SubWallet does not currently recognize a chain with genesis hash, please add the network first',
    noRawData: 'There is no raw data from the request',
    noSenderFound: 'There is no related account in the app',
    externalAccount: 'There is external account',
    framesToBig: 'Frames number is too big, the QR seems not to be a recognized extrinsic raw data',
  },
};
