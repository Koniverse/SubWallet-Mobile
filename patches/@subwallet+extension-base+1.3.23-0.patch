diff --git a/node_modules/@subwallet/extension-base/services/swap-service/handler/chainflip-handler.js b/node_modules/@subwallet/extension-base/services/swap-service/handler/chainflip-handler.js
index d23008f..2ef49f8 100644
--- a/node_modules/@subwallet/extension-base/services/swap-service/handler/chainflip-handler.js
+++ b/node_modules/@subwallet/extension-base/services/swap-service/handler/chainflip-handler.js
@@ -1,209 +1,22 @@
 // Copyright 2019-2022 @subwallet/extension-base
 // SPDX-License-Identifier: Apache-2.0
 
-import { COMMON_ASSETS } from '@subwallet/chain-list';
-import { TransactionError } from '@subwallet/extension-base/background/errors/TransactionError';
-import { ChainType, ExtrinsicType } from '@subwallet/extension-base/background/KoniTypes';
-import { getERC20TransactionObject, getEVMTransactionObject } from '@subwallet/extension-base/services/balance-service/transfer/smart-contract';
-import { createSubstrateExtrinsic } from '@subwallet/extension-base/services/balance-service/transfer/token';
-import { _getAssetSymbol, _getContractAddressOfToken, _isChainSubstrateCompatible, _isNativeToken } from '@subwallet/extension-base/services/chain-service/utils';
-import { SwapBaseHandler } from '@subwallet/extension-base/services/swap-service/handler/base-handler';
-import { getChainflipSwap } from '@subwallet/extension-base/services/swap-service/utils';
-import { BasicTxErrorType } from '@subwallet/extension-base/types';
-import { CommonStepType } from '@subwallet/extension-base/types/service-base';
-import { SwapProviderId, SwapStepType } from '@subwallet/extension-base/types/swap';
-import { _reformatAddressWithChain } from '@subwallet/extension-base/utils';
-import { getId } from '@subwallet/extension-base/utils/getId';
-import BigNumber from 'bignumber.js';
-const INTERMEDIARY_MAINNET_ASSET_SLUG = COMMON_ASSETS.USDC_ETHEREUM;
-const INTERMEDIARY_TESTNET_ASSET_SLUG = COMMON_ASSETS.USDC_SEPOLIA;
+import { SwapProviderId } from '@subwallet/extension-base/types';
 export const CHAINFLIP_BROKER_API = process.env.CHAINFLIP_BROKER_API || '';
 export class ChainflipSwapHandler {
-  constructor(chainService, balanceService, feeService, isTestnet = true) {
-    this.swapBaseHandler = new SwapBaseHandler({
-      chainService,
-      balanceService,
-      feeService,
-      providerName: isTestnet ? 'Chainflip Testnet' : 'Chainflip',
-      providerSlug: isTestnet ? SwapProviderId.CHAIN_FLIP_TESTNET : SwapProviderId.CHAIN_FLIP_MAINNET
-    });
-    this.isTestnet = isTestnet;
+  constructor(chainService, balanceService, isTestnet = true) {
     this.providerSlug = isTestnet ? SwapProviderId.CHAIN_FLIP_TESTNET : SwapProviderId.CHAIN_FLIP_MAINNET;
-    this.baseUrl = getChainflipSwap(isTestnet);
   }
-  get chainService() {
-    return this.swapBaseHandler.chainService;
+  handleSubmitStep(params) {
+    throw new Error('Not implemented');
   }
-  get balanceService() {
-    return this.swapBaseHandler.balanceService;
+  handleSwapProcess(params) {
+    throw new Error('Not implemented');
   }
-  get providerInfo() {
-    return this.swapBaseHandler.providerInfo;
+  validateSwapProcess(params) {
+    return Promise.resolve([]);
   }
-  get name() {
-    return this.swapBaseHandler.name;
-  }
-  get slug() {
-    return this.swapBaseHandler.slug;
-  }
-  get intermediaryAssetSlug() {
-    if (this.isTestnet) {
-      return INTERMEDIARY_TESTNET_ASSET_SLUG;
-    } else {
-      return INTERMEDIARY_MAINNET_ASSET_SLUG;
-    }
-  }
-  async validateSwapProcess(params) {
-    const amount = params.selectedQuote.fromAmount;
-    const bnAmount = new BigNumber(amount);
-    if (bnAmount.lte(0)) {
-      return [new TransactionError(BasicTxErrorType.INVALID_PARAMS, 'Amount must be greater than 0')];
-    }
-    let isXcmOk = false;
-    for (const [index, step] of params.process.steps.entries()) {
-      const getErrors = async () => {
-        switch (step.type) {
-          case CommonStepType.DEFAULT:
-            return Promise.resolve([]);
-          case CommonStepType.TOKEN_APPROVAL:
-            return Promise.reject(new TransactionError(BasicTxErrorType.UNSUPPORTED));
-          default:
-            return this.swapBaseHandler.validateSwapStep(params, isXcmOk, index);
-        }
-      };
-      const errors = await getErrors();
-      if (errors.length) {
-        return errors;
-      } else if (step.type === CommonStepType.XCM) {
-        isXcmOk = true;
-      }
-    }
-    return [];
-  }
-  async handleSubmitStep(params) {
-    const {
-      address,
-      quote,
-      recipient,
-      slippage
-    } = params;
-    const pair = quote.pair;
-    const fromAsset = this.chainService.getAssetBySlug(pair.from);
-    const toAsset = this.chainService.getAssetBySlug(pair.to);
-    const chainInfo = this.chainService.getChainInfoByKey(fromAsset.originChain);
-    const toChainInfo = this.chainService.getChainInfoByKey(fromAsset.originChain);
-    const chainType = _isChainSubstrateCompatible(chainInfo) ? ChainType.SUBSTRATE : ChainType.EVM;
-    const receiver = _reformatAddressWithChain(recipient !== null && recipient !== void 0 ? recipient : address, toChainInfo);
-    const fromAssetId = _getAssetSymbol(fromAsset);
-    const toAssetId = _getAssetSymbol(toAsset);
-    const minReceive = new BigNumber(quote.rate).times(1 - slippage).toString();
-    const depositParams = {
-      destinationAddress: receiver,
-      destinationAsset: toAssetId,
-      minimumPrice: minReceive,
-      // minimum accepted price for swaps through the channel
-      refundAddress: address,
-      // address to which assets are refunded
-      retryDurationInBlocks: '100',
-      // 100 blocks * 6 seconds = 10 minutes before deposits are refunded
-      sourceAsset: fromAssetId
-    };
-    const url = `${this.baseUrl}&${new URLSearchParams(depositParams).toString()}`;
-    const response = await fetch(url, {
-      method: 'GET'
-    });
-    const data = await response.json();
-    const depositChannelId = `${data.issuedBlock}-${data.network}-${data.channelId}`;
-    const depositAddress = data.address;
-    const txData = {
-      address,
-      provider: this.providerInfo,
-      quote: params.quote,
-      slippage: params.slippage,
-      recipient,
-      depositChannelId: depositChannelId,
-      depositAddress: depositAddress,
-      process: params.process
-    };
-    let extrinsic;
-    if (chainType === ChainType.SUBSTRATE) {
-      const chainApi = this.chainService.getSubstrateApi(chainInfo.slug);
-      const substrateApi = await chainApi.isReady;
-      const [submittableExtrinsic] = await createSubstrateExtrinsic({
-        from: address,
-        networkKey: chainInfo.slug,
-        substrateApi,
-        to: depositAddress,
-        tokenInfo: fromAsset,
-        transferAll: false,
-        // always false, because we do not allow swapping all the balance
-        value: quote.fromAmount
-      });
-      extrinsic = submittableExtrinsic;
-    } else {
-      const id = getId();
-      const feeInfo = await this.swapBaseHandler.feeService.subscribeChainFee(id, chainInfo.slug, 'evm');
-      if (_isNativeToken(fromAsset)) {
-        const [transactionConfig] = await getEVMTransactionObject({
-          chain: chainInfo.slug,
-          evmApi: this.chainService.getEvmApi(chainInfo.slug),
-          from: address,
-          to: depositAddress,
-          value: quote.fromAmount,
-          feeInfo,
-          transferAll: false
-        });
-        extrinsic = transactionConfig;
-      } else {
-        const [transactionConfig] = await getERC20TransactionObject({
-          assetAddress: _getContractAddressOfToken(fromAsset),
-          chain: chainInfo.slug,
-          evmApi: this.chainService.getEvmApi(chainInfo.slug),
-          from: address,
-          to: depositAddress,
-          value: quote.fromAmount,
-          feeInfo,
-          transferAll: false
-        });
-        extrinsic = transactionConfig;
-      }
-    }
-    return {
-      txChain: fromAsset.originChain,
-      txData,
-      extrinsic,
-      transferNativeAmount: _isNativeToken(fromAsset) ? quote.fromAmount : '0',
-      // todo
-      extrinsicType: ExtrinsicType.SWAP,
-      chainType
-    };
-  }
-  async handleSwapProcess(params) {
-    const {
-      currentStep,
-      process
-    } = params;
-    const type = process.steps[currentStep].type;
-    switch (type) {
-      case CommonStepType.DEFAULT:
-        return Promise.reject(new TransactionError(BasicTxErrorType.UNSUPPORTED));
-      case SwapStepType.SWAP:
-        return this.handleSubmitStep(params);
-      default:
-        return this.handleSubmitStep(params);
-    }
-  }
-  async getSubmitStep(params) {
-    if (params.selectedQuote) {
-      const submitStep = {
-        name: 'Swap',
-        type: SwapStepType.SWAP
-      };
-      return Promise.resolve([submitStep, params.selectedQuote.feeInfo]);
-    }
-    return Promise.resolve(undefined);
-  }
-  generateOptimalProcess(params) {
-    return this.swapBaseHandler.generateOptimalProcess(params, [this.getSubmitStep.bind(this)]);
+  validateSwapRequest(request) {
+    throw new Error('Not implemented');
   }
 }
