diff --git a/node_modules/react-native/React/Fabric/RCTThirdPartyFabricComponentsProvider.h b/node_modules/react-native/React/Fabric/RCTThirdPartyFabricComponentsProvider.h
new file mode 100644
index 0000000..0dc8a75
--- /dev/null
+++ b/node_modules/react-native/React/Fabric/RCTThirdPartyFabricComponentsProvider.h
@@ -0,0 +1,116 @@
+
+/*
+ * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
+ *
+ * Do not edit this file as changes may cause incorrect behavior and will be lost
+ * once the code is regenerated.
+ *
+ * @generated by GenerateRCTThirdPartyFabricComponentsProviderH
+ */
+
+#pragma GCC diagnostic push
+#pragma GCC diagnostic ignored "-Wreturn-type-c-linkage"
+
+#import <React/RCTComponentViewProtocol.h>
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+Class<RCTComponentViewProtocol> RCTThirdPartyFabricComponentsProvider(const char *name);
+#if RCT_NEW_ARCH_ENABLED
+#ifndef RCT_DYNAMIC_FRAMEWORKS
+
+#if !TARGET_OS_VISION
+
+#endif
+
+#if !TARGET_OS_OSX && !TARGET_OS_VISION
+
+#endif
+
+#if !TARGET_OS_VISION
+
+#endif
+
+#if !TARGET_OS_OSX && !TARGET_OS_TV
+Class<RCTComponentViewProtocol> RNCSliderCls(void) __attribute__((used)); // 3
+#endif
+
+Class<RCTComponentViewProtocol> RNGestureHandlerButtonCls(void) __attribute__((used)); // 4
+Class<RCTComponentViewProtocol> RNGestureHandlerRootViewCls(void) __attribute__((used)); // 4
+#if !TARGET_OS_OSX && !TARGET_OS_TV && !TARGET_OS_VISION
+
+#endif
+
+
+#if !TARGET_OS_VISION
+
+#endif
+
+#if !TARGET_OS_OSX && !TARGET_OS_TV && !TARGET_OS_VISION
+Class<RCTComponentViewProtocol> RNCViewPagerCls(void) __attribute__((used)); // 8
+#endif
+
+#if !TARGET_OS_OSX && !TARGET_OS_VISION
+
+#endif
+
+#if !TARGET_OS_OSX
+Class<RCTComponentViewProtocol> RNCSafeAreaProviderCls(void) __attribute__((used)); // 10
+Class<RCTComponentViewProtocol> RNCSafeAreaViewCls(void) __attribute__((used)); // 10
+#endif
+
+#if !TARGET_OS_OSX && !TARGET_OS_VISION
+Class<RCTComponentViewProtocol> RNSFullWindowOverlayCls(void) __attribute__((used)); // 11
+Class<RCTComponentViewProtocol> RNSScreenContainerCls(void) __attribute__((used)); // 11
+Class<RCTComponentViewProtocol> RNSScreenCls(void) __attribute__((used)); // 11
+Class<RCTComponentViewProtocol> RNSScreenNavigationContainerCls(void) __attribute__((used)); // 11
+Class<RCTComponentViewProtocol> RNSScreenStackHeaderConfigCls(void) __attribute__((used)); // 11
+Class<RCTComponentViewProtocol> RNSScreenStackHeaderSubviewCls(void) __attribute__((used)); // 11
+Class<RCTComponentViewProtocol> RNSScreenStackCls(void) __attribute__((used)); // 11
+Class<RCTComponentViewProtocol> RNSSearchBarCls(void) __attribute__((used)); // 11
+#endif
+
+#if !TARGET_OS_VISION
+Class<RCTComponentViewProtocol> RNSVGCircleCls(void) __attribute__((used)); // 12
+Class<RCTComponentViewProtocol> RNSVGClipPathCls(void) __attribute__((used)); // 12
+Class<RCTComponentViewProtocol> RNSVGDefsCls(void) __attribute__((used)); // 12
+Class<RCTComponentViewProtocol> RNSVGEllipseCls(void) __attribute__((used)); // 12
+Class<RCTComponentViewProtocol> RNSVGForeignObjectCls(void) __attribute__((used)); // 12
+Class<RCTComponentViewProtocol> RNSVGGroupCls(void) __attribute__((used)); // 12
+Class<RCTComponentViewProtocol> RNSVGImageCls(void) __attribute__((used)); // 12
+Class<RCTComponentViewProtocol> RNSVGSvgViewCls(void) __attribute__((used)); // 12
+Class<RCTComponentViewProtocol> RNSVGLinearGradientCls(void) __attribute__((used)); // 12
+Class<RCTComponentViewProtocol> RNSVGLineCls(void) __attribute__((used)); // 12
+Class<RCTComponentViewProtocol> RNSVGMarkerCls(void) __attribute__((used)); // 12
+Class<RCTComponentViewProtocol> RNSVGMaskCls(void) __attribute__((used)); // 12
+Class<RCTComponentViewProtocol> RNSVGPathCls(void) __attribute__((used)); // 12
+Class<RCTComponentViewProtocol> RNSVGPatternCls(void) __attribute__((used)); // 12
+Class<RCTComponentViewProtocol> RNSVGRadialGradientCls(void) __attribute__((used)); // 12
+Class<RCTComponentViewProtocol> RNSVGRectCls(void) __attribute__((used)); // 12
+Class<RCTComponentViewProtocol> RNSVGSymbolCls(void) __attribute__((used)); // 12
+Class<RCTComponentViewProtocol> RNSVGTextCls(void) __attribute__((used)); // 12
+Class<RCTComponentViewProtocol> RNSVGTextPathCls(void) __attribute__((used)); // 12
+Class<RCTComponentViewProtocol> RNSVGTSpanCls(void) __attribute__((used)); // 12
+Class<RCTComponentViewProtocol> RNSVGUseCls(void) __attribute__((used)); // 12
+#endif
+
+#if !TARGET_OS_OSX && !TARGET_OS_VISION
+
+#endif
+
+#if !TARGET_OS_TV && !TARGET_OS_VISION
+Class<RCTComponentViewProtocol> RNCWebViewCls(void) __attribute__((used)); // 14
+#endif
+
+
+#endif
+#endif
+
+#ifdef __cplusplus
+}
+#endif
+
+#pragma GCC diagnostic pop
+
diff --git a/node_modules/react-native/React/Fabric/RCTThirdPartyFabricComponentsProvider.mm b/node_modules/react-native/React/Fabric/RCTThirdPartyFabricComponentsProvider.mm
new file mode 100644
index 0000000..4e6a2d5
--- /dev/null
+++ b/node_modules/react-native/React/Fabric/RCTThirdPartyFabricComponentsProvider.mm
@@ -0,0 +1,151 @@
+
+/**
+ * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
+ *
+ * Do not edit this file as changes may cause incorrect behavior and will be lost
+ * once the code is regenerated.
+ *
+ * @generated by GenerateRCTThirdPartyFabricComponentsProviderCpp
+ */
+
+// OSS-compatibility layer
+
+#import "RCTThirdPartyFabricComponentsProvider.h"
+
+#import <string>
+#import <unordered_map>
+
+Class<RCTComponentViewProtocol> RCTThirdPartyFabricComponentsProvider(const char *name) {
+  static std::unordered_map<std::string, Class (*)(void)> sFabricComponentsClassMap = {
+    #if RCT_NEW_ARCH_ENABLED
+    #ifndef RCT_DYNAMIC_FRAMEWORKS
+#if !TARGET_OS_VISION
+
+#endif
+
+#if !TARGET_OS_OSX && !TARGET_OS_VISION
+
+#endif
+
+#if !TARGET_OS_VISION
+
+#endif
+
+#if !TARGET_OS_OSX && !TARGET_OS_TV
+
+    {"RNCSlider", RNCSliderCls}, // 3
+#endif
+
+
+    {"RNGestureHandlerButton", RNGestureHandlerButtonCls}, // 4
+
+    {"RNGestureHandlerRootView", RNGestureHandlerRootViewCls}, // 4
+#if !TARGET_OS_OSX && !TARGET_OS_TV && !TARGET_OS_VISION
+
+#endif
+
+
+#if !TARGET_OS_VISION
+
+#endif
+
+#if !TARGET_OS_OSX && !TARGET_OS_TV && !TARGET_OS_VISION
+
+    {"RNCViewPager", RNCViewPagerCls}, // 8
+#endif
+
+#if !TARGET_OS_OSX && !TARGET_OS_VISION
+
+#endif
+
+#if !TARGET_OS_OSX
+
+    {"RNCSafeAreaProvider", RNCSafeAreaProviderCls}, // 10
+
+    {"RNCSafeAreaView", RNCSafeAreaViewCls}, // 10
+#endif
+
+#if !TARGET_OS_OSX && !TARGET_OS_VISION
+
+    {"RNSFullWindowOverlay", RNSFullWindowOverlayCls}, // 11
+
+    {"RNSScreenContainer", RNSScreenContainerCls}, // 11
+
+    {"RNSScreen", RNSScreenCls}, // 11
+
+    {"RNSScreenNavigationContainer", RNSScreenNavigationContainerCls}, // 11
+
+    {"RNSScreenStackHeaderConfig", RNSScreenStackHeaderConfigCls}, // 11
+
+    {"RNSScreenStackHeaderSubview", RNSScreenStackHeaderSubviewCls}, // 11
+
+    {"RNSScreenStack", RNSScreenStackCls}, // 11
+
+    {"RNSSearchBar", RNSSearchBarCls}, // 11
+#endif
+
+#if !TARGET_OS_VISION
+
+    {"RNSVGCircle", RNSVGCircleCls}, // 12
+
+    {"RNSVGClipPath", RNSVGClipPathCls}, // 12
+
+    {"RNSVGDefs", RNSVGDefsCls}, // 12
+
+    {"RNSVGEllipse", RNSVGEllipseCls}, // 12
+
+    {"RNSVGForeignObject", RNSVGForeignObjectCls}, // 12
+
+    {"RNSVGGroup", RNSVGGroupCls}, // 12
+
+    {"RNSVGImage", RNSVGImageCls}, // 12
+
+    {"RNSVGSvgView", RNSVGSvgViewCls}, // 12
+
+    {"RNSVGLinearGradient", RNSVGLinearGradientCls}, // 12
+
+    {"RNSVGLine", RNSVGLineCls}, // 12
+
+    {"RNSVGMarker", RNSVGMarkerCls}, // 12
+
+    {"RNSVGMask", RNSVGMaskCls}, // 12
+
+    {"RNSVGPath", RNSVGPathCls}, // 12
+
+    {"RNSVGPattern", RNSVGPatternCls}, // 12
+
+    {"RNSVGRadialGradient", RNSVGRadialGradientCls}, // 12
+
+    {"RNSVGRect", RNSVGRectCls}, // 12
+
+    {"RNSVGSymbol", RNSVGSymbolCls}, // 12
+
+    {"RNSVGText", RNSVGTextCls}, // 12
+
+    {"RNSVGTextPath", RNSVGTextPathCls}, // 12
+
+    {"RNSVGTSpan", RNSVGTSpanCls}, // 12
+
+    {"RNSVGUse", RNSVGUseCls}, // 12
+#endif
+
+#if !TARGET_OS_OSX && !TARGET_OS_VISION
+
+#endif
+
+#if !TARGET_OS_TV && !TARGET_OS_VISION
+
+    {"RNCWebView", RNCWebViewCls}, // 14
+#endif
+
+    #endif
+    #endif
+  };
+
+  auto p = sFabricComponentsClassMap.find(name);
+  if (p != sFabricComponentsClassMap.end()) {
+    auto classFunc = p->second;
+    return classFunc();
+  }
+  return nil;
+}
diff --git a/node_modules/react-native/ReactAndroid/api/ReactAndroid.api b/node_modules/react-native/ReactAndroid/api/ReactAndroid.api
index e647de2..6a14ffd 100644
--- a/node_modules/react-native/ReactAndroid/api/ReactAndroid.api
+++ b/node_modules/react-native/ReactAndroid/api/ReactAndroid.api
@@ -6459,9 +6459,9 @@ public class com/facebook/react/views/imagehelper/ImageSource {
 	public final fun getSize ()D
 	public final fun getSource ()Ljava/lang/String;
 	public static final fun getTransparentBitmapImageSource (Landroid/content/Context;)Lcom/facebook/react/views/imagehelper/ImageSource;
-	public final fun getUri ()Landroid/net/Uri;
+	public fun getUri ()Landroid/net/Uri;
 	public fun hashCode ()I
-	public final fun isResource ()Z
+	public fun isResource ()Z
 }

 public final class com/facebook/react/views/imagehelper/ImageSource$Companion {
diff --git a/node_modules/react-native/ReactAndroid/src/main/java/com/facebook/react/views/imagehelper/ImageSource.kt b/node_modules/react-native/ReactAndroid/src/main/java/com/facebook/react/views/imagehelper/ImageSource.kt
index 583b4a0..c6b419e 100644
--- a/node_modules/react-native/ReactAndroid/src/main/java/com/facebook/react/views/imagehelper/ImageSource.kt
+++ b/node_modules/react-native/ReactAndroid/src/main/java/com/facebook/react/views/imagehelper/ImageSource.kt
@@ -23,12 +23,14 @@ constructor(
 ) {

   /** Get the URI for this image - can be either a parsed network URI or a resource URI. */
-  public val uri: Uri = computeUri(context)
+  public open val uri: Uri = computeUri(context)
   /** Get the area of this image. */
   public val size: Double = width * height
   /** Get whether this image source represents an Android resource or a network URI. */
-  public var isResource: Boolean = false
-    private set
+  public open var isResource: Boolean = false
+    get() = _isResource
+
+  private var _isResource: Boolean = false

   override fun equals(other: Any?): Boolean {
     if (this === other) {
@@ -58,7 +60,7 @@ constructor(
       }

   private fun computeLocalUri(context: Context): Uri {
-    isResource = true
+    _isResource = true
     return ResourceDrawableIdHelper.instance.getResourceDrawableUri(context, source)
   }

