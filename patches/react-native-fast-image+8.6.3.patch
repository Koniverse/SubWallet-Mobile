diff --git a/node_modules/react-native-fast-image/android/build/generated/ap_generated_sources/debug/out/com/bumptech/glide/GeneratedAppGlideModuleImpl.java b/node_modules/react-native-fast-image/android/build/generated/ap_generated_sources/debug/out/com/bumptech/glide/GeneratedAppGlideModuleImpl.java
new file mode 100644
index 0000000..d1697fa
--- /dev/null
+++ b/node_modules/react-native-fast-image/android/build/generated/ap_generated_sources/debug/out/com/bumptech/glide/GeneratedAppGlideModuleImpl.java
@@ -0,0 +1,54 @@
+package com.bumptech.glide;
+
+import android.content.Context;
+import android.util.Log;
+import androidx.annotation.NonNull;
+import com.bumptech.glide.integration.okhttp3.OkHttpLibraryGlideModule;
+import com.dylanvann.fastimage.FastImageGlideModule;
+import com.dylanvann.fastimage.FastImageOkHttpProgressGlideModule;
+import java.util.Collections;
+import java.util.Set;
+
+@SuppressWarnings("deprecation")
+final class GeneratedAppGlideModuleImpl extends GeneratedAppGlideModule {
+  private final FastImageGlideModule appGlideModule;
+
+  public GeneratedAppGlideModuleImpl(Context context) {
+    appGlideModule = new FastImageGlideModule();
+    if (Log.isLoggable("Glide", Log.DEBUG)) {
+      Log.d("Glide", "Discovered AppGlideModule from annotation: com.dylanvann.fastimage.FastImageGlideModule");
+      Log.d("Glide", "Discovered LibraryGlideModule from annotation: com.bumptech.glide.integration.okhttp3.OkHttpLibraryGlideModule");
+      Log.d("Glide", "Discovered LibraryGlideModule from annotation: com.dylanvann.fastimage.FastImageOkHttpProgressGlideModule");
+    }
+  }
+
+  @Override
+  public void applyOptions(@NonNull Context context, @NonNull GlideBuilder builder) {
+    appGlideModule.applyOptions(context, builder);
+  }
+
+  @Override
+  public void registerComponents(@NonNull Context context, @NonNull Glide glide,
+      @NonNull Registry registry) {
+    new OkHttpLibraryGlideModule().registerComponents(context, glide, registry);
+    new FastImageOkHttpProgressGlideModule().registerComponents(context, glide, registry);
+    appGlideModule.registerComponents(context, glide, registry);
+  }
+
+  @Override
+  public boolean isManifestParsingEnabled() {
+    return appGlideModule.isManifestParsingEnabled();
+  }
+
+  @Override
+  @NonNull
+  public Set<Class<?>> getExcludedModuleClasses() {
+    return Collections.emptySet();
+  }
+
+  @Override
+  @NonNull
+  GeneratedRequestManagerFactory getRequestManagerFactory() {
+    return new GeneratedRequestManagerFactory();
+  }
+}
diff --git a/node_modules/react-native-fast-image/android/build/generated/ap_generated_sources/debug/out/com/bumptech/glide/GeneratedRequestManagerFactory.java b/node_modules/react-native-fast-image/android/build/generated/ap_generated_sources/debug/out/com/bumptech/glide/GeneratedRequestManagerFactory.java
new file mode 100644
index 0000000..2e5b7b0
--- /dev/null
+++ b/node_modules/react-native-fast-image/android/build/generated/ap_generated_sources/debug/out/com/bumptech/glide/GeneratedRequestManagerFactory.java
@@ -0,0 +1,20 @@
+package com.bumptech.glide;
+
+import android.content.Context;
+import androidx.annotation.NonNull;
+import com.bumptech.glide.manager.Lifecycle;
+import com.bumptech.glide.manager.RequestManagerRetriever;
+import com.bumptech.glide.manager.RequestManagerTreeNode;
+import com.dylanvann.fastimage.GlideRequests;
+
+/**
+ * Generated code, do not modify
+ */
+final class GeneratedRequestManagerFactory implements RequestManagerRetriever.RequestManagerFactory {
+  @Override
+  @NonNull
+  public RequestManager build(@NonNull Glide glide, @NonNull Lifecycle lifecycle,
+      @NonNull RequestManagerTreeNode treeNode, @NonNull Context context) {
+    return new GlideRequests(glide, lifecycle, treeNode, context);
+  }
+}
diff --git a/node_modules/react-native-fast-image/android/build/generated/ap_generated_sources/debug/out/com/bumptech/glide/annotation/compiler/GlideIndexer_GlideModule_com_dylanvann_fastimage_FastImageOkHttpProgressGlideModule.java b/node_modules/react-native-fast-image/android/build/generated/ap_generated_sources/debug/out/com/bumptech/glide/annotation/compiler/GlideIndexer_GlideModule_com_dylanvann_fastimage_FastImageOkHttpProgressGlideModule.java
new file mode 100644
index 0000000..46dc97b
--- /dev/null
+++ b/node_modules/react-native-fast-image/android/build/generated/ap_generated_sources/debug/out/com/bumptech/glide/annotation/compiler/GlideIndexer_GlideModule_com_dylanvann_fastimage_FastImageOkHttpProgressGlideModule.java
@@ -0,0 +1,7 @@
+package com.bumptech.glide.annotation.compiler;
+
+@Index(
+    modules = "com.dylanvann.fastimage.FastImageOkHttpProgressGlideModule"
+)
+public class GlideIndexer_GlideModule_com_dylanvann_fastimage_FastImageOkHttpProgressGlideModule {
+}
diff --git a/node_modules/react-native-fast-image/android/build/generated/ap_generated_sources/debug/out/com/dylanvann/fastimage/GlideApp.java b/node_modules/react-native-fast-image/android/build/generated/ap_generated_sources/debug/out/com/dylanvann/fastimage/GlideApp.java
new file mode 100644
index 0000000..317387b
--- /dev/null
+++ b/node_modules/react-native-fast-image/android/build/generated/ap_generated_sources/debug/out/com/dylanvann/fastimage/GlideApp.java
@@ -0,0 +1,138 @@
+package com.dylanvann.fastimage;
+
+import android.annotation.SuppressLint;
+import android.app.Activity;
+import android.content.Context;
+import android.view.View;
+import androidx.annotation.NonNull;
+import androidx.annotation.Nullable;
+import androidx.annotation.VisibleForTesting;
+import androidx.fragment.app.Fragment;
+import androidx.fragment.app.FragmentActivity;
+import com.bumptech.glide.Glide;
+import com.bumptech.glide.GlideBuilder;
+import java.io.File;
+
+/**
+ * The entry point for interacting with Glide for Applications
+ *
+ * <p>Includes all generated APIs from all
+ * {@link com.bumptech.glide.annotation.GlideExtension}s in source and dependent libraries.
+ *
+ * <p>This class is generated and should not be modified
+ * @see Glide
+ */
+public final class GlideApp {
+  private GlideApp() {
+  }
+
+  /**
+   * @see Glide#getPhotoCacheDir(Context)
+   */
+  @Nullable
+  public static File getPhotoCacheDir(@NonNull Context context) {
+    return Glide.getPhotoCacheDir(context);
+  }
+
+  /**
+   * @see Glide#getPhotoCacheDir(Context, String)
+   */
+  @Nullable
+  public static File getPhotoCacheDir(@NonNull Context context, @NonNull String string) {
+    return Glide.getPhotoCacheDir(context, string);
+  }
+
+  /**
+   * @see Glide#get(Context)
+   */
+  @NonNull
+  public static Glide get(@NonNull Context context) {
+    return Glide.get(context);
+  }
+
+  /**
+   * @see Glide#init(Glide)
+   */
+  @Deprecated
+  @VisibleForTesting
+  @SuppressLint("VisibleForTests")
+  public static void init(Glide glide) {
+    Glide.init(glide);
+  }
+
+  /**
+   * @see Glide#init(Context, GlideBuilder)
+   */
+  @VisibleForTesting
+  @SuppressLint("VisibleForTests")
+  public static void init(@NonNull Context context, @NonNull GlideBuilder builder) {
+    Glide.init(context, builder);
+  }
+
+  /**
+   * @see Glide#enableHardwareBitmaps()
+   */
+  @VisibleForTesting
+  @SuppressLint("VisibleForTests")
+  public static void enableHardwareBitmaps() {
+    Glide.enableHardwareBitmaps();
+  }
+
+  /**
+   * @see Glide#tearDown()
+   */
+  @VisibleForTesting
+  @SuppressLint("VisibleForTests")
+  public static void tearDown() {
+    Glide.tearDown();
+  }
+
+  /**
+   * @see Glide#with(Context)
+   */
+  @NonNull
+  public static GlideRequests with(@NonNull Context context) {
+    return (GlideRequests) Glide.with(context);
+  }
+
+  /**
+   * @see Glide#with(Activity)
+   */
+  @NonNull
+  public static GlideRequests with(@NonNull Activity activity) {
+    return (GlideRequests) Glide.with(activity);
+  }
+
+  /**
+   * @see Glide#with(FragmentActivity)
+   */
+  @NonNull
+  public static GlideRequests with(@NonNull FragmentActivity activity) {
+    return (GlideRequests) Glide.with(activity);
+  }
+
+  /**
+   * @see Glide#with(Fragment)
+   */
+  @NonNull
+  public static GlideRequests with(@NonNull Fragment fragment) {
+    return (GlideRequests) Glide.with(fragment);
+  }
+
+  /**
+   * @see Glide#with(Fragment)
+   */
+  @Deprecated
+  @NonNull
+  public static GlideRequests with(@NonNull android.app.Fragment fragment) {
+    return (GlideRequests) Glide.with(fragment);
+  }
+
+  /**
+   * @see Glide#with(View)
+   */
+  @NonNull
+  public static GlideRequests with(@NonNull View view) {
+    return (GlideRequests) Glide.with(view);
+  }
+}
diff --git a/node_modules/react-native-fast-image/android/build/generated/ap_generated_sources/debug/out/com/dylanvann/fastimage/GlideOptions.java b/node_modules/react-native-fast-image/android/build/generated/ap_generated_sources/debug/out/com/dylanvann/fastimage/GlideOptions.java
new file mode 100644
index 0000000..442798e
--- /dev/null
+++ b/node_modules/react-native-fast-image/android/build/generated/ap_generated_sources/debug/out/com/dylanvann/fastimage/GlideOptions.java
@@ -0,0 +1,624 @@
+package com.dylanvann.fastimage;
+
+import android.content.res.Resources;
+import android.graphics.Bitmap;
+import android.graphics.drawable.Drawable;
+import androidx.annotation.CheckResult;
+import androidx.annotation.DrawableRes;
+import androidx.annotation.FloatRange;
+import androidx.annotation.IntRange;
+import androidx.annotation.NonNull;
+import androidx.annotation.Nullable;
+import com.bumptech.glide.Priority;
+import com.bumptech.glide.load.DecodeFormat;
+import com.bumptech.glide.load.Key;
+import com.bumptech.glide.load.Option;
+import com.bumptech.glide.load.Transformation;
+import com.bumptech.glide.load.engine.DiskCacheStrategy;
+import com.bumptech.glide.load.resource.bitmap.DownsampleStrategy;
+import com.bumptech.glide.request.BaseRequestOptions;
+import com.bumptech.glide.request.RequestOptions;
+
+/**
+ * Automatically generated from {@link com.bumptech.glide.annotation.GlideExtension} annotated classes.
+ *
+ * @see RequestOptions
+ */
+@SuppressWarnings("deprecation")
+public final class GlideOptions extends RequestOptions implements Cloneable {
+  private static GlideOptions fitCenterTransform0;
+
+  private static GlideOptions centerInsideTransform1;
+
+  private static GlideOptions centerCropTransform2;
+
+  private static GlideOptions circleCropTransform3;
+
+  private static GlideOptions noTransformation4;
+
+  private static GlideOptions noAnimation5;
+
+  /**
+   * @see RequestOptions#sizeMultiplierOf(float)
+   */
+  @CheckResult
+  @NonNull
+  public static GlideOptions sizeMultiplierOf(@FloatRange(from = 0.0, to = 1.0) float value) {
+    return new GlideOptions().sizeMultiplier(value);
+  }
+
+  /**
+   * @see RequestOptions#diskCacheStrategyOf(DiskCacheStrategy)
+   */
+  @CheckResult
+  @NonNull
+  public static GlideOptions diskCacheStrategyOf(@NonNull DiskCacheStrategy strategy) {
+    return new GlideOptions().diskCacheStrategy(strategy);
+  }
+
+  /**
+   * @see RequestOptions#priorityOf(Priority)
+   */
+  @CheckResult
+  @NonNull
+  public static GlideOptions priorityOf(@NonNull Priority priority) {
+    return new GlideOptions().priority(priority);
+  }
+
+  /**
+   * @see RequestOptions#placeholderOf(Drawable)
+   */
+  @CheckResult
+  @NonNull
+  public static GlideOptions placeholderOf(@Nullable Drawable drawable) {
+    return new GlideOptions().placeholder(drawable);
+  }
+
+  /**
+   * @see RequestOptions#placeholderOf(int)
+   */
+  @CheckResult
+  @NonNull
+  public static GlideOptions placeholderOf(@DrawableRes int id) {
+    return new GlideOptions().placeholder(id);
+  }
+
+  /**
+   * @see RequestOptions#errorOf(Drawable)
+   */
+  @CheckResult
+  @NonNull
+  public static GlideOptions errorOf(@Nullable Drawable drawable) {
+    return new GlideOptions().error(drawable);
+  }
+
+  /**
+   * @see RequestOptions#errorOf(int)
+   */
+  @CheckResult
+  @NonNull
+  public static GlideOptions errorOf(@DrawableRes int id) {
+    return new GlideOptions().error(id);
+  }
+
+  /**
+   * @see RequestOptions#skipMemoryCacheOf(boolean)
+   */
+  @CheckResult
+  @NonNull
+  public static GlideOptions skipMemoryCacheOf(boolean skipMemoryCache) {
+    return new GlideOptions().skipMemoryCache(skipMemoryCache);
+  }
+
+  /**
+   * @see RequestOptions#overrideOf(int, int)
+   */
+  @CheckResult
+  @NonNull
+  public static GlideOptions overrideOf(int width, int height) {
+    return new GlideOptions().override(width, height);
+  }
+
+  /**
+   * @see RequestOptions#overrideOf(int)
+   */
+  @CheckResult
+  @NonNull
+  public static GlideOptions overrideOf(int size) {
+    return new GlideOptions().override(size);
+  }
+
+  /**
+   * @see RequestOptions#signatureOf(Key)
+   */
+  @CheckResult
+  @NonNull
+  public static GlideOptions signatureOf(@NonNull Key key) {
+    return new GlideOptions().signature(key);
+  }
+
+  /**
+   * @see RequestOptions#fitCenterTransform()
+   */
+  @CheckResult
+  @NonNull
+  public static GlideOptions fitCenterTransform() {
+    if (GlideOptions.fitCenterTransform0 == null) {
+      GlideOptions.fitCenterTransform0 =
+          new GlideOptions().fitCenter().autoClone();
+    }
+    return GlideOptions.fitCenterTransform0;
+  }
+
+  /**
+   * @see RequestOptions#centerInsideTransform()
+   */
+  @CheckResult
+  @NonNull
+  public static GlideOptions centerInsideTransform() {
+    if (GlideOptions.centerInsideTransform1 == null) {
+      GlideOptions.centerInsideTransform1 =
+          new GlideOptions().centerInside().autoClone();
+    }
+    return GlideOptions.centerInsideTransform1;
+  }
+
+  /**
+   * @see RequestOptions#centerCropTransform()
+   */
+  @CheckResult
+  @NonNull
+  public static GlideOptions centerCropTransform() {
+    if (GlideOptions.centerCropTransform2 == null) {
+      GlideOptions.centerCropTransform2 =
+          new GlideOptions().centerCrop().autoClone();
+    }
+    return GlideOptions.centerCropTransform2;
+  }
+
+  /**
+   * @see RequestOptions#circleCropTransform()
+   */
+  @CheckResult
+  @NonNull
+  public static GlideOptions circleCropTransform() {
+    if (GlideOptions.circleCropTransform3 == null) {
+      GlideOptions.circleCropTransform3 =
+          new GlideOptions().circleCrop().autoClone();
+    }
+    return GlideOptions.circleCropTransform3;
+  }
+
+  /**
+   * @see RequestOptions#bitmapTransform(Transformation)
+   */
+  @CheckResult
+  @NonNull
+  public static GlideOptions bitmapTransform(@NonNull Transformation<Bitmap> transformation) {
+    return new GlideOptions().transform(transformation);
+  }
+
+  /**
+   * @see RequestOptions#noTransformation()
+   */
+  @CheckResult
+  @NonNull
+  public static GlideOptions noTransformation() {
+    if (GlideOptions.noTransformation4 == null) {
+      GlideOptions.noTransformation4 =
+          new GlideOptions().dontTransform().autoClone();
+    }
+    return GlideOptions.noTransformation4;
+  }
+
+  /**
+   * @see RequestOptions#option(Option, T)
+   */
+  @CheckResult
+  @NonNull
+  public static <T> GlideOptions option(@NonNull Option<T> option, @NonNull T t) {
+    return new GlideOptions().set(option, t);
+  }
+
+  /**
+   * @see RequestOptions#decodeTypeOf(Class)
+   */
+  @CheckResult
+  @NonNull
+  public static GlideOptions decodeTypeOf(@NonNull Class<?> clazz) {
+    return new GlideOptions().decode(clazz);
+  }
+
+  /**
+   * @see RequestOptions#formatOf(DecodeFormat)
+   */
+  @CheckResult
+  @NonNull
+  public static GlideOptions formatOf(@NonNull DecodeFormat format) {
+    return new GlideOptions().format(format);
+  }
+
+  /**
+   * @see RequestOptions#frameOf(long)
+   */
+  @CheckResult
+  @NonNull
+  public static GlideOptions frameOf(@IntRange(from = 0) long value) {
+    return new GlideOptions().frame(value);
+  }
+
+  /**
+   * @see RequestOptions#downsampleOf(DownsampleStrategy)
+   */
+  @CheckResult
+  @NonNull
+  public static GlideOptions downsampleOf(@NonNull DownsampleStrategy strategy) {
+    return new GlideOptions().downsample(strategy);
+  }
+
+  /**
+   * @see RequestOptions#timeoutOf(int)
+   */
+  @CheckResult
+  @NonNull
+  public static GlideOptions timeoutOf(@IntRange(from = 0) int value) {
+    return new GlideOptions().timeout(value);
+  }
+
+  /**
+   * @see RequestOptions#encodeQualityOf(int)
+   */
+  @CheckResult
+  @NonNull
+  public static GlideOptions encodeQualityOf(@IntRange(from = 0, to = 100) int value) {
+    return new GlideOptions().encodeQuality(value);
+  }
+
+  /**
+   * @see RequestOptions#encodeFormatOf(CompressFormat)
+   */
+  @CheckResult
+  @NonNull
+  public static GlideOptions encodeFormatOf(@NonNull Bitmap.CompressFormat format) {
+    return new GlideOptions().encodeFormat(format);
+  }
+
+  /**
+   * @see RequestOptions#noAnimation()
+   */
+  @CheckResult
+  @NonNull
+  public static GlideOptions noAnimation() {
+    if (GlideOptions.noAnimation5 == null) {
+      GlideOptions.noAnimation5 =
+          new GlideOptions().dontAnimate().autoClone();
+    }
+    return GlideOptions.noAnimation5;
+  }
+
+  @Override
+  @NonNull
+  @CheckResult
+  public GlideOptions sizeMultiplier(@FloatRange(from = 0.0, to = 1.0) float value) {
+    return (GlideOptions) super.sizeMultiplier(value);
+  }
+
+  @Override
+  @NonNull
+  @CheckResult
+  public GlideOptions useUnlimitedSourceGeneratorsPool(boolean flag) {
+    return (GlideOptions) super.useUnlimitedSourceGeneratorsPool(flag);
+  }
+
+  @Override
+  @NonNull
+  @CheckResult
+  public GlideOptions useAnimationPool(boolean flag) {
+    return (GlideOptions) super.useAnimationPool(flag);
+  }
+
+  @Override
+  @NonNull
+  @CheckResult
+  public GlideOptions onlyRetrieveFromCache(boolean flag) {
+    return (GlideOptions) super.onlyRetrieveFromCache(flag);
+  }
+
+  @Override
+  @NonNull
+  @CheckResult
+  public GlideOptions diskCacheStrategy(@NonNull DiskCacheStrategy strategy) {
+    return (GlideOptions) super.diskCacheStrategy(strategy);
+  }
+
+  @Override
+  @NonNull
+  @CheckResult
+  public GlideOptions priority(@NonNull Priority priority) {
+    return (GlideOptions) super.priority(priority);
+  }
+
+  @Override
+  @NonNull
+  @CheckResult
+  public GlideOptions placeholder(@Nullable Drawable drawable) {
+    return (GlideOptions) super.placeholder(drawable);
+  }
+
+  @Override
+  @NonNull
+  @CheckResult
+  public GlideOptions placeholder(@DrawableRes int id) {
+    return (GlideOptions) super.placeholder(id);
+  }
+
+  @Override
+  @NonNull
+  @CheckResult
+  public GlideOptions fallback(@Nullable Drawable drawable) {
+    return (GlideOptions) super.fallback(drawable);
+  }
+
+  @Override
+  @NonNull
+  @CheckResult
+  public GlideOptions fallback(@DrawableRes int id) {
+    return (GlideOptions) super.fallback(id);
+  }
+
+  @Override
+  @NonNull
+  @CheckResult
+  public GlideOptions error(@Nullable Drawable drawable) {
+    return (GlideOptions) super.error(drawable);
+  }
+
+  @Override
+  @NonNull
+  @CheckResult
+  public GlideOptions error(@DrawableRes int id) {
+    return (GlideOptions) super.error(id);
+  }
+
+  @Override
+  @NonNull
+  @CheckResult
+  public GlideOptions theme(@Nullable Resources.Theme theme) {
+    return (GlideOptions) super.theme(theme);
+  }
+
+  @Override
+  @NonNull
+  @CheckResult
+  public GlideOptions skipMemoryCache(boolean skip) {
+    return (GlideOptions) super.skipMemoryCache(skip);
+  }
+
+  @Override
+  @NonNull
+  @CheckResult
+  public GlideOptions override(int width, int height) {
+    return (GlideOptions) super.override(width, height);
+  }
+
+  @Override
+  @NonNull
+  @CheckResult
+  public GlideOptions override(int size) {
+    return (GlideOptions) super.override(size);
+  }
+
+  @Override
+  @NonNull
+  @CheckResult
+  public GlideOptions signature(@NonNull Key key) {
+    return (GlideOptions) super.signature(key);
+  }
+
+  @Override
+  @CheckResult
+  public GlideOptions clone() {
+    return (GlideOptions) super.clone();
+  }
+
+  @Override
+  @NonNull
+  @CheckResult
+  public <Y> GlideOptions set(@NonNull Option<Y> option, @NonNull Y y) {
+    return (GlideOptions) super.set(option, y);
+  }
+
+  @Override
+  @NonNull
+  @CheckResult
+  public GlideOptions decode(@NonNull Class<?> clazz) {
+    return (GlideOptions) super.decode(clazz);
+  }
+
+  @Override
+  @NonNull
+  @CheckResult
+  public GlideOptions encodeFormat(@NonNull Bitmap.CompressFormat format) {
+    return (GlideOptions) super.encodeFormat(format);
+  }
+
+  @Override
+  @NonNull
+  @CheckResult
+  public GlideOptions encodeQuality(@IntRange(from = 0, to = 100) int value) {
+    return (GlideOptions) super.encodeQuality(value);
+  }
+
+  @Override
+  @NonNull
+  @CheckResult
+  public GlideOptions frame(@IntRange(from = 0) long value) {
+    return (GlideOptions) super.frame(value);
+  }
+
+  @Override
+  @NonNull
+  @CheckResult
+  public GlideOptions format(@NonNull DecodeFormat format) {
+    return (GlideOptions) super.format(format);
+  }
+
+  @Override
+  @NonNull
+  @CheckResult
+  public GlideOptions disallowHardwareConfig() {
+    return (GlideOptions) super.disallowHardwareConfig();
+  }
+
+  @Override
+  @NonNull
+  @CheckResult
+  public GlideOptions downsample(@NonNull DownsampleStrategy strategy) {
+    return (GlideOptions) super.downsample(strategy);
+  }
+
+  @Override
+  @NonNull
+  @CheckResult
+  public GlideOptions timeout(@IntRange(from = 0) int value) {
+    return (GlideOptions) super.timeout(value);
+  }
+
+  @Override
+  @NonNull
+  @CheckResult
+  public GlideOptions optionalCenterCrop() {
+    return (GlideOptions) super.optionalCenterCrop();
+  }
+
+  @Override
+  @NonNull
+  @CheckResult
+  public GlideOptions centerCrop() {
+    return (GlideOptions) super.centerCrop();
+  }
+
+  @Override
+  @NonNull
+  @CheckResult
+  public GlideOptions optionalFitCenter() {
+    return (GlideOptions) super.optionalFitCenter();
+  }
+
+  @Override
+  @NonNull
+  @CheckResult
+  public GlideOptions fitCenter() {
+    return (GlideOptions) super.fitCenter();
+  }
+
+  @Override
+  @NonNull
+  @CheckResult
+  public GlideOptions optionalCenterInside() {
+    return (GlideOptions) super.optionalCenterInside();
+  }
+
+  @Override
+  @NonNull
+  @CheckResult
+  public GlideOptions centerInside() {
+    return (GlideOptions) super.centerInside();
+  }
+
+  @Override
+  @NonNull
+  @CheckResult
+  public GlideOptions optionalCircleCrop() {
+    return (GlideOptions) super.optionalCircleCrop();
+  }
+
+  @Override
+  @NonNull
+  @CheckResult
+  public GlideOptions circleCrop() {
+    return (GlideOptions) super.circleCrop();
+  }
+
+  @Override
+  @NonNull
+  @CheckResult
+  public GlideOptions transform(@NonNull Transformation<Bitmap> transformation) {
+    return (GlideOptions) super.transform(transformation);
+  }
+
+  @Override
+  @SafeVarargs
+  @SuppressWarnings("varargs")
+  @NonNull
+  @CheckResult
+  public final GlideOptions transform(@NonNull Transformation<Bitmap>... transformations) {
+    return (GlideOptions) super.transform(transformations);
+  }
+
+  @Override
+  @SafeVarargs
+  @SuppressWarnings("varargs")
+  @Deprecated
+  @NonNull
+  @CheckResult
+  public final GlideOptions transforms(@NonNull Transformation<Bitmap>... transformations) {
+    return (GlideOptions) super.transforms(transformations);
+  }
+
+  @Override
+  @NonNull
+  @CheckResult
+  public GlideOptions optionalTransform(@NonNull Transformation<Bitmap> transformation) {
+    return (GlideOptions) super.optionalTransform(transformation);
+  }
+
+  @Override
+  @NonNull
+  @CheckResult
+  public <Y> GlideOptions optionalTransform(@NonNull Class<Y> clazz,
+      @NonNull Transformation<Y> transformation) {
+    return (GlideOptions) super.optionalTransform(clazz, transformation);
+  }
+
+  @Override
+  @NonNull
+  @CheckResult
+  public <Y> GlideOptions transform(@NonNull Class<Y> clazz,
+      @NonNull Transformation<Y> transformation) {
+    return (GlideOptions) super.transform(clazz, transformation);
+  }
+
+  @Override
+  @NonNull
+  @CheckResult
+  public GlideOptions dontTransform() {
+    return (GlideOptions) super.dontTransform();
+  }
+
+  @Override
+  @NonNull
+  @CheckResult
+  public GlideOptions dontAnimate() {
+    return (GlideOptions) super.dontAnimate();
+  }
+
+  @Override
+  @NonNull
+  @CheckResult
+  public GlideOptions apply(@NonNull BaseRequestOptions<?> options) {
+    return (GlideOptions) super.apply(options);
+  }
+
+  @Override
+  @NonNull
+  public GlideOptions lock() {
+    return (GlideOptions) super.lock();
+  }
+
+  @Override
+  @NonNull
+  public GlideOptions autoClone() {
+    return (GlideOptions) super.autoClone();
+  }
+}
diff --git a/node_modules/react-native-fast-image/android/build/generated/ap_generated_sources/debug/out/com/dylanvann/fastimage/GlideRequest.java b/node_modules/react-native-fast-image/android/build/generated/ap_generated_sources/debug/out/com/dylanvann/fastimage/GlideRequest.java
new file mode 100644
index 0000000..5b45773
--- /dev/null
+++ b/node_modules/react-native-fast-image/android/build/generated/ap_generated_sources/debug/out/com/dylanvann/fastimage/GlideRequest.java
@@ -0,0 +1,608 @@
+package com.dylanvann.fastimage;
+
+import android.content.Context;
+import android.content.res.Resources;
+import android.graphics.Bitmap;
+import android.graphics.drawable.Drawable;
+import android.net.Uri;
+import androidx.annotation.CheckResult;
+import androidx.annotation.DrawableRes;
+import androidx.annotation.FloatRange;
+import androidx.annotation.IntRange;
+import androidx.annotation.NonNull;
+import androidx.annotation.Nullable;
+import androidx.annotation.RawRes;
+import com.bumptech.glide.Glide;
+import com.bumptech.glide.Priority;
+import com.bumptech.glide.RequestBuilder;
+import com.bumptech.glide.RequestManager;
+import com.bumptech.glide.TransitionOptions;
+import com.bumptech.glide.load.DecodeFormat;
+import com.bumptech.glide.load.Key;
+import com.bumptech.glide.load.Option;
+import com.bumptech.glide.load.Transformation;
+import com.bumptech.glide.load.engine.DiskCacheStrategy;
+import com.bumptech.glide.load.resource.bitmap.DownsampleStrategy;
+import com.bumptech.glide.request.BaseRequestOptions;
+import com.bumptech.glide.request.RequestListener;
+import java.io.File;
+import java.net.URL;
+import java.util.List;
+
+/**
+ * Contains all public methods from {@link RequestBuilder<TranscodeType>}, all options from
+ * {@link com.bumptech.glide.request.RequestOptions} and all generated options from
+ * {@link com.bumptech.glide.annotation.GlideOption} in annotated methods in
+ * {@link com.bumptech.glide.annotation.GlideExtension} annotated classes.
+ *
+ * <p>Generated code, do not modify.
+ *
+ * @see RequestBuilder<TranscodeType>
+ * @see com.bumptech.glide.request.RequestOptions
+ */
+@SuppressWarnings({
+    "unused",
+    "deprecation"
+})
+public class GlideRequest<TranscodeType> extends RequestBuilder<TranscodeType> implements Cloneable {
+  GlideRequest(@NonNull Class<TranscodeType> transcodeClass, @NonNull RequestBuilder<?> other) {
+    super(transcodeClass, other);
+  }
+
+  GlideRequest(@NonNull Glide glide, @NonNull RequestManager requestManager,
+      @NonNull Class<TranscodeType> transcodeClass, @NonNull Context context) {
+    super(glide, requestManager ,transcodeClass, context);
+  }
+
+  @Override
+  @CheckResult
+  @NonNull
+  protected GlideRequest<File> getDownloadOnlyRequest() {
+    return new GlideRequest<>(File.class, this).apply(DOWNLOAD_ONLY_OPTIONS);
+  }
+
+  /**
+   * @see GlideOptions#sizeMultiplier(float)
+   */
+  @NonNull
+  @CheckResult
+  public GlideRequest<TranscodeType> sizeMultiplier(@FloatRange(from = 0.0, to = 1.0) float value) {
+    return (GlideRequest<TranscodeType>) super.sizeMultiplier(value);
+  }
+
+  /**
+   * @see GlideOptions#useUnlimitedSourceGeneratorsPool(boolean)
+   */
+  @NonNull
+  @CheckResult
+  public GlideRequest<TranscodeType> useUnlimitedSourceGeneratorsPool(boolean flag) {
+    return (GlideRequest<TranscodeType>) super.useUnlimitedSourceGeneratorsPool(flag);
+  }
+
+  /**
+   * @see GlideOptions#useAnimationPool(boolean)
+   */
+  @NonNull
+  @CheckResult
+  public GlideRequest<TranscodeType> useAnimationPool(boolean flag) {
+    return (GlideRequest<TranscodeType>) super.useAnimationPool(flag);
+  }
+
+  /**
+   * @see GlideOptions#onlyRetrieveFromCache(boolean)
+   */
+  @NonNull
+  @CheckResult
+  public GlideRequest<TranscodeType> onlyRetrieveFromCache(boolean flag) {
+    return (GlideRequest<TranscodeType>) super.onlyRetrieveFromCache(flag);
+  }
+
+  /**
+   * @see GlideOptions#diskCacheStrategy(DiskCacheStrategy)
+   */
+  @NonNull
+  @CheckResult
+  public GlideRequest<TranscodeType> diskCacheStrategy(@NonNull DiskCacheStrategy strategy) {
+    return (GlideRequest<TranscodeType>) super.diskCacheStrategy(strategy);
+  }
+
+  /**
+   * @see GlideOptions#priority(Priority)
+   */
+  @NonNull
+  @CheckResult
+  public GlideRequest<TranscodeType> priority(@NonNull Priority priority) {
+    return (GlideRequest<TranscodeType>) super.priority(priority);
+  }
+
+  /**
+   * @see GlideOptions#placeholder(Drawable)
+   */
+  @NonNull
+  @CheckResult
+  public GlideRequest<TranscodeType> placeholder(@Nullable Drawable drawable) {
+    return (GlideRequest<TranscodeType>) super.placeholder(drawable);
+  }
+
+  /**
+   * @see GlideOptions#placeholder(int)
+   */
+  @NonNull
+  @CheckResult
+  public GlideRequest<TranscodeType> placeholder(@DrawableRes int id) {
+    return (GlideRequest<TranscodeType>) super.placeholder(id);
+  }
+
+  /**
+   * @see GlideOptions#fallback(Drawable)
+   */
+  @NonNull
+  @CheckResult
+  public GlideRequest<TranscodeType> fallback(@Nullable Drawable drawable) {
+    return (GlideRequest<TranscodeType>) super.fallback(drawable);
+  }
+
+  /**
+   * @see GlideOptions#fallback(int)
+   */
+  @NonNull
+  @CheckResult
+  public GlideRequest<TranscodeType> fallback(@DrawableRes int id) {
+    return (GlideRequest<TranscodeType>) super.fallback(id);
+  }
+
+  /**
+   * @see GlideOptions#error(Drawable)
+   */
+  @NonNull
+  @CheckResult
+  public GlideRequest<TranscodeType> error(@Nullable Drawable drawable) {
+    return (GlideRequest<TranscodeType>) super.error(drawable);
+  }
+
+  /**
+   * @see GlideOptions#error(int)
+   */
+  @NonNull
+  @CheckResult
+  public GlideRequest<TranscodeType> error(@DrawableRes int id) {
+    return (GlideRequest<TranscodeType>) super.error(id);
+  }
+
+  /**
+   * @see GlideOptions#theme(Resources.Theme)
+   */
+  @NonNull
+  @CheckResult
+  public GlideRequest<TranscodeType> theme(@Nullable Resources.Theme theme) {
+    return (GlideRequest<TranscodeType>) super.theme(theme);
+  }
+
+  /**
+   * @see GlideOptions#skipMemoryCache(boolean)
+   */
+  @NonNull
+  @CheckResult
+  public GlideRequest<TranscodeType> skipMemoryCache(boolean skip) {
+    return (GlideRequest<TranscodeType>) super.skipMemoryCache(skip);
+  }
+
+  /**
+   * @see GlideOptions#override(int, int)
+   */
+  @NonNull
+  @CheckResult
+  public GlideRequest<TranscodeType> override(int width, int height) {
+    return (GlideRequest<TranscodeType>) super.override(width, height);
+  }
+
+  /**
+   * @see GlideOptions#override(int)
+   */
+  @NonNull
+  @CheckResult
+  public GlideRequest<TranscodeType> override(int size) {
+    return (GlideRequest<TranscodeType>) super.override(size);
+  }
+
+  /**
+   * @see GlideOptions#signature(Key)
+   */
+  @NonNull
+  @CheckResult
+  public GlideRequest<TranscodeType> signature(@NonNull Key key) {
+    return (GlideRequest<TranscodeType>) super.signature(key);
+  }
+
+  /**
+   * @see GlideOptions#set(Option<Y>, Y)
+   */
+  @NonNull
+  @CheckResult
+  public <Y> GlideRequest<TranscodeType> set(@NonNull Option<Y> option, @NonNull Y y) {
+    return (GlideRequest<TranscodeType>) super.set(option, y);
+  }
+
+  /**
+   * @see GlideOptions#decode(Class<?>)
+   */
+  @NonNull
+  @CheckResult
+  public GlideRequest<TranscodeType> decode(@NonNull Class<?> clazz) {
+    return (GlideRequest<TranscodeType>) super.decode(clazz);
+  }
+
+  /**
+   * @see GlideOptions#encodeFormat(Bitmap.CompressFormat)
+   */
+  @NonNull
+  @CheckResult
+  public GlideRequest<TranscodeType> encodeFormat(@NonNull Bitmap.CompressFormat format) {
+    return (GlideRequest<TranscodeType>) super.encodeFormat(format);
+  }
+
+  /**
+   * @see GlideOptions#encodeQuality(int)
+   */
+  @NonNull
+  @CheckResult
+  public GlideRequest<TranscodeType> encodeQuality(@IntRange(from = 0, to = 100) int value) {
+    return (GlideRequest<TranscodeType>) super.encodeQuality(value);
+  }
+
+  /**
+   * @see GlideOptions#frame(long)
+   */
+  @NonNull
+  @CheckResult
+  public GlideRequest<TranscodeType> frame(@IntRange(from = 0) long value) {
+    return (GlideRequest<TranscodeType>) super.frame(value);
+  }
+
+  /**
+   * @see GlideOptions#format(DecodeFormat)
+   */
+  @NonNull
+  @CheckResult
+  public GlideRequest<TranscodeType> format(@NonNull DecodeFormat format) {
+    return (GlideRequest<TranscodeType>) super.format(format);
+  }
+
+  /**
+   * @see GlideOptions#disallowHardwareConfig()
+   */
+  @NonNull
+  @CheckResult
+  public GlideRequest<TranscodeType> disallowHardwareConfig() {
+    return (GlideRequest<TranscodeType>) super.disallowHardwareConfig();
+  }
+
+  /**
+   * @see GlideOptions#downsample(DownsampleStrategy)
+   */
+  @NonNull
+  @CheckResult
+  public GlideRequest<TranscodeType> downsample(@NonNull DownsampleStrategy strategy) {
+    return (GlideRequest<TranscodeType>) super.downsample(strategy);
+  }
+
+  /**
+   * @see GlideOptions#timeout(int)
+   */
+  @NonNull
+  @CheckResult
+  public GlideRequest<TranscodeType> timeout(@IntRange(from = 0) int value) {
+    return (GlideRequest<TranscodeType>) super.timeout(value);
+  }
+
+  /**
+   * @see GlideOptions#optionalCenterCrop()
+   */
+  @NonNull
+  @CheckResult
+  public GlideRequest<TranscodeType> optionalCenterCrop() {
+    return (GlideRequest<TranscodeType>) super.optionalCenterCrop();
+  }
+
+  /**
+   * @see GlideOptions#centerCrop()
+   */
+  @NonNull
+  @CheckResult
+  public GlideRequest<TranscodeType> centerCrop() {
+    return (GlideRequest<TranscodeType>) super.centerCrop();
+  }
+
+  /**
+   * @see GlideOptions#optionalFitCenter()
+   */
+  @NonNull
+  @CheckResult
+  public GlideRequest<TranscodeType> optionalFitCenter() {
+    return (GlideRequest<TranscodeType>) super.optionalFitCenter();
+  }
+
+  /**
+   * @see GlideOptions#fitCenter()
+   */
+  @NonNull
+  @CheckResult
+  public GlideRequest<TranscodeType> fitCenter() {
+    return (GlideRequest<TranscodeType>) super.fitCenter();
+  }
+
+  /**
+   * @see GlideOptions#optionalCenterInside()
+   */
+  @NonNull
+  @CheckResult
+  public GlideRequest<TranscodeType> optionalCenterInside() {
+    return (GlideRequest<TranscodeType>) super.optionalCenterInside();
+  }
+
+  /**
+   * @see GlideOptions#centerInside()
+   */
+  @NonNull
+  @CheckResult
+  public GlideRequest<TranscodeType> centerInside() {
+    return (GlideRequest<TranscodeType>) super.centerInside();
+  }
+
+  /**
+   * @see GlideOptions#optionalCircleCrop()
+   */
+  @NonNull
+  @CheckResult
+  public GlideRequest<TranscodeType> optionalCircleCrop() {
+    return (GlideRequest<TranscodeType>) super.optionalCircleCrop();
+  }
+
+  /**
+   * @see GlideOptions#circleCrop()
+   */
+  @NonNull
+  @CheckResult
+  public GlideRequest<TranscodeType> circleCrop() {
+    return (GlideRequest<TranscodeType>) super.circleCrop();
+  }
+
+  /**
+   * @see GlideOptions#transform(Transformation<Bitmap>)
+   */
+  @NonNull
+  @CheckResult
+  public GlideRequest<TranscodeType> transform(@NonNull Transformation<Bitmap> transformation) {
+    return (GlideRequest<TranscodeType>) super.transform(transformation);
+  }
+
+  /**
+   * @see GlideOptions#transform(Transformation<Bitmap>[])
+   */
+  @NonNull
+  @CheckResult
+  @SuppressWarnings({
+      "unchecked",
+      "varargs"
+  })
+  public GlideRequest<TranscodeType> transform(@NonNull Transformation<Bitmap>... transformations) {
+    return (GlideRequest<TranscodeType>) super.transform(transformations);
+  }
+
+  /**
+   * @see GlideOptions#transforms(Transformation<Bitmap>[])
+   */
+  @Deprecated
+  @NonNull
+  @CheckResult
+  @SuppressWarnings({
+      "unchecked",
+      "varargs"
+  })
+  public GlideRequest<TranscodeType> transforms(@NonNull Transformation<Bitmap>... transformations) {
+    return (GlideRequest<TranscodeType>) super.transforms(transformations);
+  }
+
+  /**
+   * @see GlideOptions#optionalTransform(Transformation<Bitmap>)
+   */
+  @NonNull
+  @CheckResult
+  public GlideRequest<TranscodeType> optionalTransform(@NonNull Transformation<Bitmap> transformation) {
+    return (GlideRequest<TranscodeType>) super.optionalTransform(transformation);
+  }
+
+  /**
+   * @see GlideOptions#optionalTransform(Class<Y>, Transformation<Y>)
+   */
+  @NonNull
+  @CheckResult
+  public <Y> GlideRequest<TranscodeType> optionalTransform(@NonNull Class<Y> clazz,
+      @NonNull Transformation<Y> transformation) {
+    return (GlideRequest<TranscodeType>) super.optionalTransform(clazz, transformation);
+  }
+
+  /**
+   * @see GlideOptions#transform(Class<Y>, Transformation<Y>)
+   */
+  @NonNull
+  @CheckResult
+  public <Y> GlideRequest<TranscodeType> transform(@NonNull Class<Y> clazz,
+      @NonNull Transformation<Y> transformation) {
+    return (GlideRequest<TranscodeType>) super.transform(clazz, transformation);
+  }
+
+  /**
+   * @see GlideOptions#dontTransform()
+   */
+  @NonNull
+  @CheckResult
+  public GlideRequest<TranscodeType> dontTransform() {
+    return (GlideRequest<TranscodeType>) super.dontTransform();
+  }
+
+  /**
+   * @see GlideOptions#dontAnimate()
+   */
+  @NonNull
+  @CheckResult
+  public GlideRequest<TranscodeType> dontAnimate() {
+    return (GlideRequest<TranscodeType>) super.dontAnimate();
+  }
+
+  /**
+   * @see GlideOptions#lock()
+   */
+  @NonNull
+  public GlideRequest<TranscodeType> lock() {
+    return (GlideRequest<TranscodeType>) super.lock();
+  }
+
+  /**
+   * @see GlideOptions#autoClone()
+   */
+  @NonNull
+  public GlideRequest<TranscodeType> autoClone() {
+    return (GlideRequest<TranscodeType>) super.autoClone();
+  }
+
+  @Override
+  @NonNull
+  @CheckResult
+  public GlideRequest<TranscodeType> apply(@NonNull BaseRequestOptions<?> options) {
+    return (GlideRequest<TranscodeType>) super.apply(options);
+  }
+
+  @Override
+  @NonNull
+  @CheckResult
+  public GlideRequest<TranscodeType> transition(@NonNull TransitionOptions<?, ? super TranscodeType> options) {
+    return (GlideRequest<TranscodeType>) super.transition(options);
+  }
+
+  @Override
+  @NonNull
+  @CheckResult
+  public GlideRequest<TranscodeType> listener(@Nullable RequestListener<TranscodeType> listener) {
+    return (GlideRequest<TranscodeType>) super.listener(listener);
+  }
+
+  @Override
+  @NonNull
+  @CheckResult
+  public GlideRequest<TranscodeType> addListener(@Nullable RequestListener<TranscodeType> listener) {
+    return (GlideRequest<TranscodeType>) super.addListener(listener);
+  }
+
+  @Override
+  @NonNull
+  public GlideRequest<TranscodeType> error(@Nullable RequestBuilder<TranscodeType> builder) {
+    return (GlideRequest<TranscodeType>) super.error(builder);
+  }
+
+  @Override
+  @NonNull
+  @CheckResult
+  public GlideRequest<TranscodeType> error(Object o) {
+    return (GlideRequest<TranscodeType>) super.error(o);
+  }
+
+  @Override
+  @NonNull
+  @CheckResult
+  public GlideRequest<TranscodeType> thumbnail(@Nullable RequestBuilder<TranscodeType> builder) {
+    return (GlideRequest<TranscodeType>) super.thumbnail(builder);
+  }
+
+  @Override
+  @NonNull
+  @CheckResult
+  @SafeVarargs
+  @SuppressWarnings("varargs")
+  public final GlideRequest<TranscodeType> thumbnail(@Nullable RequestBuilder<TranscodeType>... builders) {
+    return (GlideRequest<TranscodeType>) super.thumbnail(builders);
+  }
+
+  @Override
+  @NonNull
+  @CheckResult
+  public GlideRequest<TranscodeType> thumbnail(@Nullable List<RequestBuilder<TranscodeType>> list) {
+    return (GlideRequest<TranscodeType>) super.thumbnail(list);
+  }
+
+  @Override
+  @NonNull
+  @CheckResult
+  public GlideRequest<TranscodeType> thumbnail(float sizeMultiplier) {
+    return (GlideRequest<TranscodeType>) super.thumbnail(sizeMultiplier);
+  }
+
+  @Override
+  @NonNull
+  @CheckResult
+  public GlideRequest<TranscodeType> load(@Nullable Object o) {
+    return (GlideRequest<TranscodeType>) super.load(o);
+  }
+
+  @Override
+  @NonNull
+  @CheckResult
+  public GlideRequest<TranscodeType> load(@Nullable Bitmap bitmap) {
+    return (GlideRequest<TranscodeType>) super.load(bitmap);
+  }
+
+  @Override
+  @NonNull
+  @CheckResult
+  public GlideRequest<TranscodeType> load(@Nullable Drawable drawable) {
+    return (GlideRequest<TranscodeType>) super.load(drawable);
+  }
+
+  @Override
+  @NonNull
+  @CheckResult
+  public GlideRequest<TranscodeType> load(@Nullable String string) {
+    return (GlideRequest<TranscodeType>) super.load(string);
+  }
+
+  @Override
+  @NonNull
+  @CheckResult
+  public GlideRequest<TranscodeType> load(@Nullable Uri uri) {
+    return (GlideRequest<TranscodeType>) super.load(uri);
+  }
+
+  @Override
+  @NonNull
+  @CheckResult
+  public GlideRequest<TranscodeType> load(@Nullable File file) {
+    return (GlideRequest<TranscodeType>) super.load(file);
+  }
+
+  @Override
+  @NonNull
+  @CheckResult
+  public GlideRequest<TranscodeType> load(@RawRes @DrawableRes @Nullable Integer id) {
+    return (GlideRequest<TranscodeType>) super.load(id);
+  }
+
+  @Override
+  @Deprecated
+  @CheckResult
+  public GlideRequest<TranscodeType> load(@Nullable URL url) {
+    return (GlideRequest<TranscodeType>) super.load(url);
+  }
+
+  @Override
+  @NonNull
+  @CheckResult
+  public GlideRequest<TranscodeType> load(@Nullable byte[] bytes) {
+    return (GlideRequest<TranscodeType>) super.load(bytes);
+  }
+
+  @Override
+  @CheckResult
+  public GlideRequest<TranscodeType> clone() {
+    return (GlideRequest<TranscodeType>) super.clone();
+  }
+}
diff --git a/node_modules/react-native-fast-image/android/build/generated/ap_generated_sources/debug/out/com/dylanvann/fastimage/GlideRequests.java b/node_modules/react-native-fast-image/android/build/generated/ap_generated_sources/debug/out/com/dylanvann/fastimage/GlideRequests.java
new file mode 100644
index 0000000..afc3f30
--- /dev/null
+++ b/node_modules/react-native-fast-image/android/build/generated/ap_generated_sources/debug/out/com/dylanvann/fastimage/GlideRequests.java
@@ -0,0 +1,173 @@
+package com.dylanvann.fastimage;
+
+import android.content.Context;
+import android.graphics.Bitmap;
+import android.graphics.drawable.Drawable;
+import android.net.Uri;
+import androidx.annotation.CheckResult;
+import androidx.annotation.DrawableRes;
+import androidx.annotation.NonNull;
+import androidx.annotation.Nullable;
+import androidx.annotation.RawRes;
+import com.bumptech.glide.Glide;
+import com.bumptech.glide.RequestManager;
+import com.bumptech.glide.load.resource.gif.GifDrawable;
+import com.bumptech.glide.manager.Lifecycle;
+import com.bumptech.glide.manager.RequestManagerTreeNode;
+import com.bumptech.glide.request.RequestListener;
+import com.bumptech.glide.request.RequestOptions;
+import java.io.File;
+import java.net.URL;
+
+/**
+ * Includes all additions from methods in {@link com.bumptech.glide.annotation.GlideExtension}s
+ * annotated with {@link com.bumptech.glide.annotation.GlideType}
+ *
+ * <p>Generated code, do not modify
+ */
+@SuppressWarnings("deprecation")
+public class GlideRequests extends RequestManager {
+  public GlideRequests(@NonNull Glide glide, @NonNull Lifecycle lifecycle,
+      @NonNull RequestManagerTreeNode treeNode, @NonNull Context context) {
+    super(glide, lifecycle, treeNode, context);
+  }
+
+  @Override
+  @CheckResult
+  @NonNull
+  public <ResourceType> GlideRequest<ResourceType> as(@NonNull Class<ResourceType> resourceClass) {
+    return new GlideRequest<>(glide, this, resourceClass, context);
+  }
+
+  @Override
+  @NonNull
+  public synchronized GlideRequests applyDefaultRequestOptions(@NonNull RequestOptions options) {
+    return (GlideRequests) super.applyDefaultRequestOptions(options);
+  }
+
+  @Override
+  @NonNull
+  public synchronized GlideRequests setDefaultRequestOptions(@NonNull RequestOptions options) {
+    return (GlideRequests) super.setDefaultRequestOptions(options);
+  }
+
+  @Override
+  @NonNull
+  public GlideRequests addDefaultRequestListener(RequestListener<Object> listener) {
+    return (GlideRequests) super.addDefaultRequestListener(listener);
+  }
+
+  @Override
+  @NonNull
+  @CheckResult
+  public GlideRequest<Bitmap> asBitmap() {
+    return (GlideRequest<Bitmap>) super.asBitmap();
+  }
+
+  @Override
+  @NonNull
+  @CheckResult
+  public GlideRequest<GifDrawable> asGif() {
+    return (GlideRequest<GifDrawable>) super.asGif();
+  }
+
+  @Override
+  @NonNull
+  @CheckResult
+  public GlideRequest<Drawable> asDrawable() {
+    return (GlideRequest<Drawable>) super.asDrawable();
+  }
+
+  @Override
+  @NonNull
+  @CheckResult
+  public GlideRequest<Drawable> load(@Nullable Bitmap bitmap) {
+    return (GlideRequest<Drawable>) super.load(bitmap);
+  }
+
+  @Override
+  @NonNull
+  @CheckResult
+  public GlideRequest<Drawable> load(@Nullable Drawable drawable) {
+    return (GlideRequest<Drawable>) super.load(drawable);
+  }
+
+  @Override
+  @NonNull
+  @CheckResult
+  public GlideRequest<Drawable> load(@Nullable String string) {
+    return (GlideRequest<Drawable>) super.load(string);
+  }
+
+  @Override
+  @NonNull
+  @CheckResult
+  public GlideRequest<Drawable> load(@Nullable Uri uri) {
+    return (GlideRequest<Drawable>) super.load(uri);
+  }
+
+  @Override
+  @NonNull
+  @CheckResult
+  public GlideRequest<Drawable> load(@Nullable File file) {
+    return (GlideRequest<Drawable>) super.load(file);
+  }
+
+  @Override
+  @NonNull
+  @CheckResult
+  public GlideRequest<Drawable> load(@RawRes @DrawableRes @Nullable Integer id) {
+    return (GlideRequest<Drawable>) super.load(id);
+  }
+
+  @Override
+  @Deprecated
+  @CheckResult
+  public GlideRequest<Drawable> load(@Nullable URL url) {
+    return (GlideRequest<Drawable>) super.load(url);
+  }
+
+  @Override
+  @NonNull
+  @CheckResult
+  public GlideRequest<Drawable> load(@Nullable byte[] bytes) {
+    return (GlideRequest<Drawable>) super.load(bytes);
+  }
+
+  @Override
+  @NonNull
+  @CheckResult
+  public GlideRequest<Drawable> load(@Nullable Object o) {
+    return (GlideRequest<Drawable>) super.load(o);
+  }
+
+  @Override
+  @NonNull
+  @CheckResult
+  public GlideRequest<File> downloadOnly() {
+    return (GlideRequest<File>) super.downloadOnly();
+  }
+
+  @Override
+  @NonNull
+  @CheckResult
+  public GlideRequest<File> download(@Nullable Object o) {
+    return (GlideRequest<File>) super.download(o);
+  }
+
+  @Override
+  @NonNull
+  @CheckResult
+  public GlideRequest<File> asFile() {
+    return (GlideRequest<File>) super.asFile();
+  }
+
+  @Override
+  protected void setRequestOptions(@NonNull RequestOptions toSet) {
+    if (toSet instanceof com.dylanvann.fastimage.GlideOptions) {
+      super.setRequestOptions(toSet);
+    } else {
+      super.setRequestOptions(new com.dylanvann.fastimage.GlideOptions().apply(toSet));
+    }
+  }
+}
diff --git a/node_modules/react-native-fast-image/android/build/generated/source/buildConfig/debug/com/dylanvann/fastimage/BuildConfig.java b/node_modules/react-native-fast-image/android/build/generated/source/buildConfig/debug/com/dylanvann/fastimage/BuildConfig.java
new file mode 100644
index 0000000..385f24d
--- /dev/null
+++ b/node_modules/react-native-fast-image/android/build/generated/source/buildConfig/debug/com/dylanvann/fastimage/BuildConfig.java
@@ -0,0 +1,10 @@
+/**
+ * Automatically generated file. DO NOT MODIFY
+ */
+package com.dylanvann.fastimage;
+
+public final class BuildConfig {
+  public static final boolean DEBUG = Boolean.parseBoolean("true");
+  public static final String LIBRARY_PACKAGE_NAME = "com.dylanvann.fastimage";
+  public static final String BUILD_TYPE = "debug";
+}
diff --git a/node_modules/react-native-fast-image/android/build/intermediates/aapt_friendly_merged_manifests/debug/processDebugManifest/aapt/AndroidManifest.xml b/node_modules/react-native-fast-image/android/build/intermediates/aapt_friendly_merged_manifests/debug/processDebugManifest/aapt/AndroidManifest.xml
new file mode 100644
index 0000000..577a7e5
--- /dev/null
+++ b/node_modules/react-native-fast-image/android/build/intermediates/aapt_friendly_merged_manifests/debug/processDebugManifest/aapt/AndroidManifest.xml
@@ -0,0 +1,7 @@
+<?xml version="1.0" encoding="utf-8"?>
+<manifest xmlns:android="http://schemas.android.com/apk/res/android"
+    package="com.dylanvann.fastimage" >
+
+    <uses-sdk android:minSdkVersion="23" />
+
+</manifest>
\ No newline at end of file
diff --git a/node_modules/react-native-fast-image/android/build/intermediates/aapt_friendly_merged_manifests/debug/processDebugManifest/aapt/output-metadata.json b/node_modules/react-native-fast-image/android/build/intermediates/aapt_friendly_merged_manifests/debug/processDebugManifest/aapt/output-metadata.json
new file mode 100644
index 0000000..c657541
--- /dev/null
+++ b/node_modules/react-native-fast-image/android/build/intermediates/aapt_friendly_merged_manifests/debug/processDebugManifest/aapt/output-metadata.json
@@ -0,0 +1,18 @@
+{
+  "version": 3,
+  "artifactType": {
+    "type": "AAPT_FRIENDLY_MERGED_MANIFESTS",
+    "kind": "Directory"
+  },
+  "applicationId": "com.dylanvann.fastimage",
+  "variantName": "debug",
+  "elements": [
+    {
+      "type": "SINGLE",
+      "filters": [],
+      "attributes": [],
+      "outputFile": "AndroidManifest.xml"
+    }
+  ],
+  "elementType": "File"
+}
\ No newline at end of file
diff --git a/node_modules/react-native-fast-image/android/build/intermediates/aar_metadata/debug/writeDebugAarMetadata/aar-metadata.properties b/node_modules/react-native-fast-image/android/build/intermediates/aar_metadata/debug/writeDebugAarMetadata/aar-metadata.properties
new file mode 100644
index 0000000..1211b1e
--- /dev/null
+++ b/node_modules/react-native-fast-image/android/build/intermediates/aar_metadata/debug/writeDebugAarMetadata/aar-metadata.properties
@@ -0,0 +1,6 @@
+aarFormatVersion=1.0
+aarMetadataVersion=1.0
+minCompileSdk=1
+minCompileSdkExtension=0
+minAndroidGradlePluginVersion=1.0.0
+coreLibraryDesugaringEnabled=false
diff --git a/node_modules/react-native-fast-image/android/build/intermediates/annotation_processor_list/debug/javaPreCompileDebug/annotationProcessors.json b/node_modules/react-native-fast-image/android/build/intermediates/annotation_processor_list/debug/javaPreCompileDebug/annotationProcessors.json
new file mode 100644
index 0000000..9ae96ed
--- /dev/null
+++ b/node_modules/react-native-fast-image/android/build/intermediates/annotation_processor_list/debug/javaPreCompileDebug/annotationProcessors.json
@@ -0,0 +1 @@
+{"compiler-4.12.0.jar (com.github.bumptech.glide:compiler:4.12.0)":"INCREMENTAL_AP"}
\ No newline at end of file
diff --git a/node_modules/react-native-fast-image/android/build/intermediates/compile_r_class_jar/debug/generateDebugRFile/R.jar b/node_modules/react-native-fast-image/android/build/intermediates/compile_r_class_jar/debug/generateDebugRFile/R.jar
new file mode 100644
index 0000000..8fd9e05
Binary files /dev/null and b/node_modules/react-native-fast-image/android/build/intermediates/compile_r_class_jar/debug/generateDebugRFile/R.jar differ
diff --git a/node_modules/react-native-fast-image/android/build/intermediates/compile_symbol_list/debug/generateDebugRFile/R.txt b/node_modules/react-native-fast-image/android/build/intermediates/compile_symbol_list/debug/generateDebugRFile/R.txt
new file mode 100644
index 0000000..e69de29
diff --git a/node_modules/react-native-fast-image/android/build/intermediates/incremental/debug/packageDebugResources/compile-file-map.properties b/node_modules/react-native-fast-image/android/build/intermediates/incremental/debug/packageDebugResources/compile-file-map.properties
new file mode 100644
index 0000000..25b3aa8
--- /dev/null
+++ b/node_modules/react-native-fast-image/android/build/intermediates/incremental/debug/packageDebugResources/compile-file-map.properties
@@ -0,0 +1 @@
+#Mon Sep 09 15:05:00 ICT 2024
diff --git a/node_modules/react-native-fast-image/android/build/intermediates/incremental/debug/packageDebugResources/merger.xml b/node_modules/react-native-fast-image/android/build/intermediates/incremental/debug/packageDebugResources/merger.xml
new file mode 100644
index 0000000..dc4c5d0
--- /dev/null
+++ b/node_modules/react-native-fast-image/android/build/intermediates/incremental/debug/packageDebugResources/merger.xml
@@ -0,0 +1,2 @@
+<?xml version="1.0" encoding="utf-8"?>
+<merger version="3"><dataSet aapt-namespace="http://schemas.android.com/apk/res-auto" config="main$Generated" generated="true" ignore_pattern="!.svn:!.git:!.ds_store:!*.scc:.*:&lt;dir>_*:!CVS:!thumbs.db:!picasa.ini:!*~"><source path="/Users/dominhquang/WebstormProjects/SubWallet-Mobile/node_modules/react-native-fast-image/android/src/main/res"/></dataSet><dataSet aapt-namespace="http://schemas.android.com/apk/res-auto" config="main" generated-set="main$Generated" ignore_pattern="!.svn:!.git:!.ds_store:!*.scc:.*:&lt;dir>_*:!CVS:!thumbs.db:!picasa.ini:!*~"><source path="/Users/dominhquang/WebstormProjects/SubWallet-Mobile/node_modules/react-native-fast-image/android/src/main/res"/></dataSet><dataSet aapt-namespace="http://schemas.android.com/apk/res-auto" config="debug$Generated" generated="true" ignore_pattern="!.svn:!.git:!.ds_store:!*.scc:.*:&lt;dir>_*:!CVS:!thumbs.db:!picasa.ini:!*~"><source path="/Users/dominhquang/WebstormProjects/SubWallet-Mobile/node_modules/react-native-fast-image/android/src/debug/res"/></dataSet><dataSet aapt-namespace="http://schemas.android.com/apk/res-auto" config="debug" generated-set="debug$Generated" ignore_pattern="!.svn:!.git:!.ds_store:!*.scc:.*:&lt;dir>_*:!CVS:!thumbs.db:!picasa.ini:!*~"><source path="/Users/dominhquang/WebstormProjects/SubWallet-Mobile/node_modules/react-native-fast-image/android/src/debug/res"/></dataSet><dataSet aapt-namespace="http://schemas.android.com/apk/res-auto" config="generated$Generated" generated="true" ignore_pattern="!.svn:!.git:!.ds_store:!*.scc:.*:&lt;dir>_*:!CVS:!thumbs.db:!picasa.ini:!*~"><source path="/Users/dominhquang/WebstormProjects/SubWallet-Mobile/node_modules/react-native-fast-image/android/build/generated/res/resValues/debug"/></dataSet><dataSet aapt-namespace="http://schemas.android.com/apk/res-auto" config="generated" generated-set="generated$Generated" ignore_pattern="!.svn:!.git:!.ds_store:!*.scc:.*:&lt;dir>_*:!CVS:!thumbs.db:!picasa.ini:!*~"><source path="/Users/dominhquang/WebstormProjects/SubWallet-Mobile/node_modules/react-native-fast-image/android/build/generated/res/resValues/debug"/></dataSet><mergedItems/></merger>
\ No newline at end of file
diff --git a/node_modules/react-native-fast-image/android/build/intermediates/javac/debug/compileDebugJavaWithJavac/classes/com/dylanvann/fastimage/FastImageCacheControl.class b/node_modules/react-native-fast-image/android/build/intermediates/javac/debug/compileDebugJavaWithJavac/classes/com/dylanvann/fastimage/FastImageCacheControl.class
new file mode 100644
index 0000000..f962ea9
Binary files /dev/null and b/node_modules/react-native-fast-image/android/build/intermediates/javac/debug/compileDebugJavaWithJavac/classes/com/dylanvann/fastimage/FastImageCacheControl.class differ
diff --git a/node_modules/react-native-fast-image/android/build/intermediates/javac/debug/compileDebugJavaWithJavac/classes/com/dylanvann/fastimage/FastImageOkHttpProgressGlideModule$1.class b/node_modules/react-native-fast-image/android/build/intermediates/javac/debug/compileDebugJavaWithJavac/classes/com/dylanvann/fastimage/FastImageOkHttpProgressGlideModule$1.class
new file mode 100644
index 0000000..191f116
Binary files /dev/null and b/node_modules/react-native-fast-image/android/build/intermediates/javac/debug/compileDebugJavaWithJavac/classes/com/dylanvann/fastimage/FastImageOkHttpProgressGlideModule$1.class differ
diff --git a/node_modules/react-native-fast-image/android/build/intermediates/javac/debug/compileDebugJavaWithJavac/classes/com/dylanvann/fastimage/FastImageOkHttpProgressGlideModule$DispatchingProgressListener.class b/node_modules/react-native-fast-image/android/build/intermediates/javac/debug/compileDebugJavaWithJavac/classes/com/dylanvann/fastimage/FastImageOkHttpProgressGlideModule$DispatchingProgressListener.class
new file mode 100644
index 0000000..5b97c08
Binary files /dev/null and b/node_modules/react-native-fast-image/android/build/intermediates/javac/debug/compileDebugJavaWithJavac/classes/com/dylanvann/fastimage/FastImageOkHttpProgressGlideModule$DispatchingProgressListener.class differ
diff --git a/node_modules/react-native-fast-image/android/build/intermediates/javac/debug/compileDebugJavaWithJavac/classes/com/dylanvann/fastimage/FastImageOkHttpProgressGlideModule$OkHttpProgressResponseBody$1.class b/node_modules/react-native-fast-image/android/build/intermediates/javac/debug/compileDebugJavaWithJavac/classes/com/dylanvann/fastimage/FastImageOkHttpProgressGlideModule$OkHttpProgressResponseBody$1.class
new file mode 100644
index 0000000..8154b33
Binary files /dev/null and b/node_modules/react-native-fast-image/android/build/intermediates/javac/debug/compileDebugJavaWithJavac/classes/com/dylanvann/fastimage/FastImageOkHttpProgressGlideModule$OkHttpProgressResponseBody$1.class differ
diff --git a/node_modules/react-native-fast-image/android/build/intermediates/javac/debug/compileDebugJavaWithJavac/classes/com/dylanvann/fastimage/FastImageOkHttpProgressGlideModule$OkHttpProgressResponseBody.class b/node_modules/react-native-fast-image/android/build/intermediates/javac/debug/compileDebugJavaWithJavac/classes/com/dylanvann/fastimage/FastImageOkHttpProgressGlideModule$OkHttpProgressResponseBody.class
new file mode 100644
index 0000000..50ff859
Binary files /dev/null and b/node_modules/react-native-fast-image/android/build/intermediates/javac/debug/compileDebugJavaWithJavac/classes/com/dylanvann/fastimage/FastImageOkHttpProgressGlideModule$OkHttpProgressResponseBody.class differ
diff --git a/node_modules/react-native-fast-image/android/build/intermediates/javac/debug/compileDebugJavaWithJavac/classes/com/dylanvann/fastimage/FastImageOkHttpProgressGlideModule$ResponseProgressListener.class b/node_modules/react-native-fast-image/android/build/intermediates/javac/debug/compileDebugJavaWithJavac/classes/com/dylanvann/fastimage/FastImageOkHttpProgressGlideModule$ResponseProgressListener.class
new file mode 100644
index 0000000..cbe65bf
Binary files /dev/null and b/node_modules/react-native-fast-image/android/build/intermediates/javac/debug/compileDebugJavaWithJavac/classes/com/dylanvann/fastimage/FastImageOkHttpProgressGlideModule$ResponseProgressListener.class differ
diff --git a/node_modules/react-native-fast-image/android/build/intermediates/javac/debug/compileDebugJavaWithJavac/classes/com/dylanvann/fastimage/FastImageOkHttpProgressGlideModule.class b/node_modules/react-native-fast-image/android/build/intermediates/javac/debug/compileDebugJavaWithJavac/classes/com/dylanvann/fastimage/FastImageOkHttpProgressGlideModule.class
new file mode 100644
index 0000000..0498f20
Binary files /dev/null and b/node_modules/react-native-fast-image/android/build/intermediates/javac/debug/compileDebugJavaWithJavac/classes/com/dylanvann/fastimage/FastImageOkHttpProgressGlideModule.class differ
diff --git a/node_modules/react-native-fast-image/android/build/intermediates/javac/debug/compileDebugJavaWithJavac/classes/com/dylanvann/fastimage/FastImageProgressListener.class b/node_modules/react-native-fast-image/android/build/intermediates/javac/debug/compileDebugJavaWithJavac/classes/com/dylanvann/fastimage/FastImageProgressListener.class
new file mode 100644
index 0000000..597af0d
Binary files /dev/null and b/node_modules/react-native-fast-image/android/build/intermediates/javac/debug/compileDebugJavaWithJavac/classes/com/dylanvann/fastimage/FastImageProgressListener.class differ
diff --git a/node_modules/react-native-fast-image/android/build/intermediates/javac/debug/compileDebugJavaWithJavac/classes/com/dylanvann/fastimage/FastImageViewConverter$1.class b/node_modules/react-native-fast-image/android/build/intermediates/javac/debug/compileDebugJavaWithJavac/classes/com/dylanvann/fastimage/FastImageViewConverter$1.class
new file mode 100644
index 0000000..7ab7144
Binary files /dev/null and b/node_modules/react-native-fast-image/android/build/intermediates/javac/debug/compileDebugJavaWithJavac/classes/com/dylanvann/fastimage/FastImageViewConverter$1.class differ
diff --git a/node_modules/react-native-fast-image/android/build/intermediates/javac/debug/compileDebugJavaWithJavac/classes/com/dylanvann/fastimage/FastImageViewConverter$2.class b/node_modules/react-native-fast-image/android/build/intermediates/javac/debug/compileDebugJavaWithJavac/classes/com/dylanvann/fastimage/FastImageViewConverter$2.class
new file mode 100644
index 0000000..f5dbcdd
Binary files /dev/null and b/node_modules/react-native-fast-image/android/build/intermediates/javac/debug/compileDebugJavaWithJavac/classes/com/dylanvann/fastimage/FastImageViewConverter$2.class differ
diff --git a/node_modules/react-native-fast-image/android/build/intermediates/javac/debug/compileDebugJavaWithJavac/classes/com/dylanvann/fastimage/FastImageViewConverter$3.class b/node_modules/react-native-fast-image/android/build/intermediates/javac/debug/compileDebugJavaWithJavac/classes/com/dylanvann/fastimage/FastImageViewConverter$3.class
new file mode 100644
index 0000000..c3b35b9
Binary files /dev/null and b/node_modules/react-native-fast-image/android/build/intermediates/javac/debug/compileDebugJavaWithJavac/classes/com/dylanvann/fastimage/FastImageViewConverter$3.class differ
diff --git a/node_modules/react-native-fast-image/android/build/intermediates/javac/debug/compileDebugJavaWithJavac/classes/com/dylanvann/fastimage/FastImageViewConverter$4.class b/node_modules/react-native-fast-image/android/build/intermediates/javac/debug/compileDebugJavaWithJavac/classes/com/dylanvann/fastimage/FastImageViewConverter$4.class
new file mode 100644
index 0000000..5d7abde
Binary files /dev/null and b/node_modules/react-native-fast-image/android/build/intermediates/javac/debug/compileDebugJavaWithJavac/classes/com/dylanvann/fastimage/FastImageViewConverter$4.class differ
diff --git a/node_modules/react-native-fast-image/android/build/intermediates/javac/debug/compileDebugJavaWithJavac/classes/com/dylanvann/fastimage/FastImageViewConverter.class b/node_modules/react-native-fast-image/android/build/intermediates/javac/debug/compileDebugJavaWithJavac/classes/com/dylanvann/fastimage/FastImageViewConverter.class
new file mode 100644
index 0000000..4727651
Binary files /dev/null and b/node_modules/react-native-fast-image/android/build/intermediates/javac/debug/compileDebugJavaWithJavac/classes/com/dylanvann/fastimage/FastImageViewConverter.class differ
diff --git a/node_modules/react-native-fast-image/android/build/intermediates/local_only_symbol_list/debug/parseDebugLocalResources/R-def.txt b/node_modules/react-native-fast-image/android/build/intermediates/local_only_symbol_list/debug/parseDebugLocalResources/R-def.txt
new file mode 100644
index 0000000..78ac5b8
--- /dev/null
+++ b/node_modules/react-native-fast-image/android/build/intermediates/local_only_symbol_list/debug/parseDebugLocalResources/R-def.txt
@@ -0,0 +1,2 @@
+R_DEF: Internal format may change without notice
+local
diff --git a/node_modules/react-native-fast-image/android/build/intermediates/manifest_merge_blame_file/debug/processDebugManifest/manifest-merger-blame-debug-report.txt b/node_modules/react-native-fast-image/android/build/intermediates/manifest_merge_blame_file/debug/processDebugManifest/manifest-merger-blame-debug-report.txt
new file mode 100644
index 0000000..4215644
--- /dev/null
+++ b/node_modules/react-native-fast-image/android/build/intermediates/manifest_merge_blame_file/debug/processDebugManifest/manifest-merger-blame-debug-report.txt
@@ -0,0 +1,7 @@
+1<?xml version="1.0" encoding="utf-8"?>
+2<manifest xmlns:android="http://schemas.android.com/apk/res/android"
+3    package="com.dylanvann.fastimage" >
+4
+5    <uses-sdk android:minSdkVersion="23" />
+6
+7</manifest>
diff --git a/node_modules/react-native-fast-image/android/build/intermediates/merged_manifest/debug/processDebugManifest/AndroidManifest.xml b/node_modules/react-native-fast-image/android/build/intermediates/merged_manifest/debug/processDebugManifest/AndroidManifest.xml
new file mode 100644
index 0000000..577a7e5
--- /dev/null
+++ b/node_modules/react-native-fast-image/android/build/intermediates/merged_manifest/debug/processDebugManifest/AndroidManifest.xml
@@ -0,0 +1,7 @@
+<?xml version="1.0" encoding="utf-8"?>
+<manifest xmlns:android="http://schemas.android.com/apk/res/android"
+    package="com.dylanvann.fastimage" >
+
+    <uses-sdk android:minSdkVersion="23" />
+
+</manifest>
\ No newline at end of file
diff --git a/node_modules/react-native-fast-image/android/build/intermediates/navigation_json/debug/extractDeepLinksDebug/navigation.json b/node_modules/react-native-fast-image/android/build/intermediates/navigation_json/debug/extractDeepLinksDebug/navigation.json
new file mode 100644
index 0000000..0637a08
--- /dev/null
+++ b/node_modules/react-native-fast-image/android/build/intermediates/navigation_json/debug/extractDeepLinksDebug/navigation.json
@@ -0,0 +1 @@
+[]
\ No newline at end of file
diff --git a/node_modules/react-native-fast-image/android/build/intermediates/nested_resources_validation_report/debug/generateDebugResources/nestedResourcesValidationReport.txt b/node_modules/react-native-fast-image/android/build/intermediates/nested_resources_validation_report/debug/generateDebugResources/nestedResourcesValidationReport.txt
new file mode 100644
index 0000000..08f4ebe
--- /dev/null
+++ b/node_modules/react-native-fast-image/android/build/intermediates/nested_resources_validation_report/debug/generateDebugResources/nestedResourcesValidationReport.txt
@@ -0,0 +1 @@
+0 Warning/Error
\ No newline at end of file
diff --git a/node_modules/react-native-fast-image/android/build/intermediates/symbol_list_with_package_name/debug/generateDebugRFile/package-aware-r.txt b/node_modules/react-native-fast-image/android/build/intermediates/symbol_list_with_package_name/debug/generateDebugRFile/package-aware-r.txt
new file mode 100644
index 0000000..4cbbb5d
--- /dev/null
+++ b/node_modules/react-native-fast-image/android/build/intermediates/symbol_list_with_package_name/debug/generateDebugRFile/package-aware-r.txt
@@ -0,0 +1 @@
+com.dylanvann.fastimage
diff --git a/node_modules/react-native-fast-image/android/build/outputs/logs/manifest-merger-debug-report.txt b/node_modules/react-native-fast-image/android/build/outputs/logs/manifest-merger-debug-report.txt
new file mode 100644
index 0000000..8a2926f
--- /dev/null
+++ b/node_modules/react-native-fast-image/android/build/outputs/logs/manifest-merger-debug-report.txt
@@ -0,0 +1,15 @@
+-- Merging decision tree log ---
+manifest
+ADDED from /Users/dominhquang/WebstormProjects/SubWallet-Mobile/node_modules/react-native-fast-image/android/src/main/AndroidManifest.xml:1:1-2:12
+INJECTED from /Users/dominhquang/WebstormProjects/SubWallet-Mobile/node_modules/react-native-fast-image/android/src/main/AndroidManifest.xml:1:1-2:12
+	package
+		ADDED from /Users/dominhquang/WebstormProjects/SubWallet-Mobile/node_modules/react-native-fast-image/android/src/main/AndroidManifest.xml:1:11-44
+		INJECTED from /Users/dominhquang/WebstormProjects/SubWallet-Mobile/node_modules/react-native-fast-image/android/src/main/AndroidManifest.xml
+uses-sdk
+INJECTED from /Users/dominhquang/WebstormProjects/SubWallet-Mobile/node_modules/react-native-fast-image/android/src/main/AndroidManifest.xml reason: use-sdk injection requested
+INJECTED from /Users/dominhquang/WebstormProjects/SubWallet-Mobile/node_modules/react-native-fast-image/android/src/main/AndroidManifest.xml
+INJECTED from /Users/dominhquang/WebstormProjects/SubWallet-Mobile/node_modules/react-native-fast-image/android/src/main/AndroidManifest.xml
+	android:targetSdkVersion
+		INJECTED from /Users/dominhquang/WebstormProjects/SubWallet-Mobile/node_modules/react-native-fast-image/android/src/main/AndroidManifest.xml
+	android:minSdkVersion
+		INJECTED from /Users/dominhquang/WebstormProjects/SubWallet-Mobile/node_modules/react-native-fast-image/android/src/main/AndroidManifest.xml
diff --git a/node_modules/react-native-fast-image/android/src/main/java/com/dylanvann/fastimage/FastImageSource.java b/node_modules/react-native-fast-image/android/src/main/java/com/dylanvann/fastimage/FastImageSource.java
index d9dbd99..0402052 100644
--- a/node_modules/react-native-fast-image/android/src/main/java/com/dylanvann/fastimage/FastImageSource.java
+++ b/node_modules/react-native-fast-image/android/src/main/java/com/dylanvann/fastimage/FastImageSource.java
@@ -11,7 +11,7 @@ import com.facebook.react.views.imagehelper.ImageSource;

 import javax.annotation.Nullable;

-public class FastImageSource extends ImageSource {
+public class FastImageSource {
     private static final String DATA_SCHEME = "data";
     private static final String LOCAL_RESOURCE_SCHEME = "res";
     private static final String ANDROID_RESOURCE_SCHEME = "android.resource";
@@ -19,6 +19,7 @@ public class FastImageSource extends ImageSource {
     private static final String LOCAL_FILE_SCHEME = "file";
     private final Headers mHeaders;
     private Uri mUri;
+    private final ImageSource imageSource; // Composition instead of inheritance

     public static boolean isBase64Uri(Uri uri) {
         return DATA_SCHEME.equals(uri.getScheme());
@@ -49,9 +50,9 @@ public class FastImageSource extends ImageSource {
     }

     public FastImageSource(Context context, String source, double width, double height, @Nullable Headers headers) {
-        super(context, source, width, height);
+        imageSource = new ImageSource(context, source, width, height); // Create ImageSource instance
         mHeaders = headers == null ? Headers.DEFAULT : headers;
-        mUri = super.getUri();
+        mUri = imageSource.getUri(); // Get URI from ImageSource

         if (isResource() && TextUtils.isEmpty(mUri.toString())) {
             throw new Resources.NotFoundException("Local Resource Not Found. Resource: '" + getSource() + "'.");
@@ -59,12 +60,11 @@ public class FastImageSource extends ImageSource {

         if (isLocalResourceUri(mUri)) {
             // Convert res:/ scheme to android.resource:// so
-            // glide can understand the uri.
+            // Glide can understand the URI.
             mUri = Uri.parse(mUri.toString().replace("res:/", ANDROID_RESOURCE_SCHEME + "://" + context.getPackageName() + "/"));
         }
     }

-
     public boolean isBase64Resource() {
         return mUri != null && FastImageSource.isBase64Uri(mUri);
     }
@@ -97,7 +97,6 @@ public class FastImageSource extends ImageSource {
         return getGlideUrl();
     }

-    @Override
     public Uri getUri() {
         return mUri;
     }
@@ -109,4 +108,8 @@ public class FastImageSource extends ImageSource {
     public GlideUrl getGlideUrl() {
         return new GlideUrl(getUri().toString(), getHeaders());
     }
+
+    public String getSource() {
+        return imageSource.getSource(); // Delegate to ImageSource
+    }
 }
